[{"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\index.js":"1","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\reportWebVitals.js":"2","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\App.js":"3","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\theme.js":"4","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\LoginApproved.js":"5","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\contexts\\SessionContext.js":"6","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\contexts\\DiscoverContext.js":"7","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\contexts\\SignedContext.js":"8","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\shared\\NavBar.js":"9","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\Discover\\DiscoverPage.js":"10","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\Credits\\Credits.js":"11","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\shared\\Footer.js":"12","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\MovieDetails\\MoviePage.js":"13","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\LandingPage\\LandingPage.js":"14","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\ActorPage\\ActorPage.js":"15","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\SearchPage\\SearchResults.js":"16","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\shared\\HamburgerMenu.js":"17","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\shared\\kategorieTeilung.js":"18","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\MovieDetails\\Review.js":"19","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\shared\\MovieCard.js":"20","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\Credits\\CreditsPerson.js":"21","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\MovieDetails\\TopBilledCast.js":"22","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\Discover\\MovieCardPhone.js":"23","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\MovieDetails\\TopMovie.js":"24","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\MovieDetails\\SideInfo.js":"25","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\LandingPage\\MovieSlider.js":"26","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\SearchPage\\SearchResultsSide.js":"27","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\LandingPage\\TrendingPeople.js":"28","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\ActorPage\\ActorCredits.js":"29","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\SearchPage\\PageNumNav.js":"30","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\Discover\\Searcher\\Searcher.js":"31","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\shared\\MovieDropLogged.js":"32","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\MovieDetails\\MediaActions.js":"33","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\ActorPage\\ActorCreditCategory.js":"34","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\Discover\\Searcher\\GenreCheckboxes.js":"35","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\shared\\MovieDropLoggedOut.js":"36","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\LandingPage\\RatingWheel.js":"37"},{"size":302,"mtime":1669923044018,"results":"38","hashOfConfig":"39"},{"size":375,"mtime":1669923044018,"results":"40","hashOfConfig":"39"},{"size":2370,"mtime":1669923043981,"results":"41","hashOfConfig":"39"},{"size":3322,"mtime":1669923044019,"results":"42","hashOfConfig":"39"},{"size":1700,"mtime":1669930037078,"results":"43","hashOfConfig":"39"},{"size":688,"mtime":1669923044005,"results":"44","hashOfConfig":"39"},{"size":734,"mtime":1669923044005,"results":"45","hashOfConfig":"39"},{"size":1681,"mtime":1669923044006,"results":"46","hashOfConfig":"39"},{"size":16513,"mtime":1669931254680,"results":"47","hashOfConfig":"39"},{"size":9402,"mtime":1669931297303,"results":"48","hashOfConfig":"39"},{"size":3611,"mtime":1669923043985,"results":"49","hashOfConfig":"39"},{"size":1890,"mtime":1669923043999,"results":"50","hashOfConfig":"39"},{"size":7370,"mtime":1669931135427,"results":"51","hashOfConfig":"39"},{"size":5141,"mtime":1669931022775,"results":"52","hashOfConfig":"39"},{"size":11557,"mtime":1669931324037,"results":"53","hashOfConfig":"39"},{"size":11010,"mtime":1669929597338,"results":"54","hashOfConfig":"39"},{"size":8503,"mtime":1669923044000,"results":"55","hashOfConfig":"39"},{"size":1320,"mtime":1669923044003,"results":"56","hashOfConfig":"39"},{"size":3090,"mtime":1669923043993,"results":"57","hashOfConfig":"39"},{"size":4390,"mtime":1669929370865,"results":"58","hashOfConfig":"39"},{"size":1790,"mtime":1669923043985,"results":"59","hashOfConfig":"39"},{"size":3960,"mtime":1669923043994,"results":"60","hashOfConfig":"39"},{"size":1996,"mtime":1669923043987,"results":"61","hashOfConfig":"39"},{"size":5673,"mtime":1669923043995,"results":"62","hashOfConfig":"39"},{"size":3949,"mtime":1669927684912,"results":"63","hashOfConfig":"39"},{"size":772,"mtime":1669929281280,"results":"64","hashOfConfig":"39"},{"size":2294,"mtime":1669929592250,"results":"65","hashOfConfig":"39"},{"size":4804,"mtime":1669931041316,"results":"66","hashOfConfig":"39"},{"size":1833,"mtime":1669923043983,"results":"67","hashOfConfig":"39"},{"size":3248,"mtime":1669929607439,"results":"68","hashOfConfig":"39"},{"size":11174,"mtime":1669923043988,"results":"69","hashOfConfig":"39"},{"size":3361,"mtime":1669931203467,"results":"70","hashOfConfig":"39"},{"size":5305,"mtime":1669931085580,"results":"71","hashOfConfig":"39"},{"size":3021,"mtime":1669923043983,"results":"72","hashOfConfig":"39"},{"size":9177,"mtime":1669923043987,"results":"73","hashOfConfig":"39"},{"size":1591,"mtime":1669931217628,"results":"74","hashOfConfig":"39"},{"size":2449,"mtime":1669923043991,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"1gpjj7v",{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"78"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"78"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"78"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"78"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"78"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"78"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"78"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"78"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"78"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"78"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"78"},"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\index.js",[],["168","169"],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\reportWebVitals.js",[],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\App.js",[],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\theme.js",[],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\LoginApproved.js",["170"],"import React, { useEffect, useState } from 'react';\r\nimport { useSignedUpdate } from './contexts/SignedContext';\r\nimport axios from 'axios';\r\nimport { useLocation, useHistory } from 'react-router-dom';\r\n\r\nimport { Button, Typography, Container } from '@material-ui/core';\r\nconst LoginApproved = () => {\r\n  const setSigned = useSignedUpdate();\r\n  const history = useHistory();\r\n\r\n  const [loginSucess, setLoginSucess] = useState(false);\r\n  console.log(history);\r\n  const location = useLocation();\r\n  const token = new URLSearchParams(location.search).get('request_token');\r\n  console.log('token', token);\r\n  const createSessionId = async () => {\r\n    try {\r\n      axios.get(`${process.env.SERVER_URL}/authentication/getSessionId`, {\r\n        params: { token: token },\r\n        withCredentials: true,\r\n      });\r\n      setSigned(true);\r\n      setLoginSucess(true);\r\n    } catch (err) {\r\n      console.log(err.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    createSessionId();\r\n  }, []);\r\n\r\n  return (\r\n    <Container\r\n      style={{\r\n        height: '60vh',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n      }}\r\n    >\r\n      {loginSucess ? (\r\n        <Typography variant=\"h3\">Login Successful </Typography>\r\n      ) : (\r\n        <Typography variant=\"h3\">Login Failed</Typography>\r\n      )}\r\n\r\n      <Button\r\n        style={{ marginTop: '20px', fontSize: '30px' }}\r\n        variant=\"text\"\r\n        onClick={() =>\r\n          (window.location = 'https://nameless-shore-33653.herokuapp.com/')\r\n        }\r\n      >\r\n        GO BACK TO MAIN PAGE\r\n      </Button>\r\n    </Container>\r\n  );\r\n};\r\nexport default LoginApproved;\r\n","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\contexts\\SessionContext.js",[],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\contexts\\DiscoverContext.js",[],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\contexts\\SignedContext.js",[],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\shared\\NavBar.js",["171","172","173","174"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport axios from 'axios';\r\nimport './style.scss';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport { useMediaQuery, ClickAwayListener } from '@material-ui/core';\r\n\r\nimport HamburgerMenu from './HamburgerMenu';\r\nimport {\r\n  useSigned,\r\n  useSignedUpdate,\r\n  useUsername,\r\n  useUsernameUpdate,\r\n  useUserIdUpdate,\r\n} from '../../contexts/SignedContext';\r\nimport logo from '../../images/logo3.png';\r\n\r\nimport {\r\n  AppBar,\r\n  InputBase,\r\n  Toolbar,\r\n  Button,\r\n  Container,\r\n  TextField,\r\n  InputAdornment,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    justifyContent: 'space-between',\r\n    alignContent: 'center',\r\n    padding: 0,\r\n    position: 'relative',\r\n  },\r\n  loginBtn: {\r\n    padding: 0,\r\n  },\r\n  userName: {\r\n    cursor: 'pointer',\r\n    color: 'white',\r\n  },\r\n  userMenu: {\r\n    '&:hover': {\r\n      backgroundColor: '#CCCCCC',\r\n    },\r\n    zIndex: 20,\r\n\r\n    display: 'none',\r\n    backgroundColor: 'white',\r\n    border: '1px black solid',\r\n  },\r\n  userMenuMobileSigned: {\r\n    position: 'absolute',\r\n    backgroundColor: 'white',\r\n    top: '40px',\r\n    border: 'black 1px solid',\r\n  },\r\n  userMenuMobileUnsigned: {\r\n    position: 'absolute',\r\n    backgroundColor: 'white',\r\n    top: '40px',\r\n    border: 'black 1px solid',\r\n  },\r\n  userWhole: {\r\n    '&:hover': {\r\n      '& > div': {\r\n        position: 'absolute',\r\n        display: 'block',\r\n      },\r\n    },\r\n  },\r\n\r\n  logoAndDiscover: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n    [theme.breakpoints.down('800')]: {\r\n      display: 'none',\r\n    },\r\n  },\r\n  searchField: {\r\n    width: '100%',\r\n    marginLeft: '20px',\r\n    marginRight: '70px',\r\n    [theme.breakpoints.down('md')]: {\r\n      width: '450px',\r\n    },\r\n    [theme.breakpoints.down('sm')]: {\r\n      width: '300px',\r\n    },\r\n    [theme.breakpoints.down('800')]: {\r\n      display: 'none',\r\n      width: 0,\r\n    },\r\n  },\r\n\r\n  mobileSearchBarOn: {},\r\n  mobileSearchBarOff: {\r\n    right: '0px',\r\n    top: '30px',\r\n    width: '98vw',\r\n  },\r\n  searchInputBase: {\r\n    position: 'absolute',\r\n    width: '100%',\r\n    transform: 'translateY(-100%)',\r\n    height: '64px',\r\n    top: '-0px',\r\n    transition: 'transform 0.5s',\r\n    left: 0,\r\n    [theme.breakpoints.down('600')]: {\r\n      height: '48px',\r\n    },\r\n    [theme.breakpoints.down('500')]: {\r\n      height: '56px',\r\n    },\r\n  },\r\n\r\n  searchInputBaseOn: {\r\n    height: '64px',\r\n    position: 'absolute',\r\n    zIndex: '20',\r\n    width: '100%',\r\n    top: '-0px',\r\n    left: 0,\r\n    [theme.breakpoints.down('600')]: {\r\n      height: '48px',\r\n    },\r\n    [theme.breakpoints.down('500')]: {\r\n      height: '56px',\r\n    },\r\n    transition: 'transform 0.5s',\r\n    transform: 'translateY(0%)',\r\n  },\r\n}));\r\n\r\nconst NavBar = () => {\r\n  const isMobile = useMediaQuery('(max-width:800px)');\r\n  const searchBarRef = useRef();\r\n  console.log(searchBarRef);\r\n  const [showMobileUserMenu, setShowMobileUserMenu] = useState(false);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const classes = useStyles();\r\n\r\n  const [showUserMenu, setShowUserMenu] = useState(false);\r\n  const [mobileSearchBar, setMobileSearchBar] = useState(false);\r\n  const history = useHistory();\r\n  const signed = useSigned();\r\n  const setSigned = useSignedUpdate();\r\n  const username = useUsername();\r\n  const setUsername = useUsernameUpdate();\r\n  const setUserId = useUserIdUpdate();\r\n  const [logged, setLogged] = useState(false);\r\n  //Load font before using Canvas\r\n  const WebFont = require('webfontloader');\r\n  WebFont.load({\r\n    google: {\r\n      families: ['Roboto'],\r\n    },\r\n  });\r\n\r\n  const getAccDetails = async () => {\r\n    const accDetails = await axios.get(\r\n      `${process.env.REACT_APP_SERVER_URL}/authentication/getAccDetails`,\r\n      {\r\n        withCredentials: true,\r\n      }\r\n    );\r\n\r\n    setUsername(accDetails.data.username);\r\n    setUserId(accDetails.data.id);\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      axios.delete(\r\n        `${process.env.REACT_APP_SERVER_URL}/authentication/logout`,\r\n        {\r\n          withCredentials: true,\r\n        }\r\n      );\r\n      setSigned(false);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  const login = async () => {\r\n    try {\r\n      const token = await axios.get(\r\n        `${process.env.REACT_APP_SERVER_URL}/authentication`\r\n      );\r\n\r\n      window.location = `https://www.themoviedb.org/authenticate/${token.data}?redirect_to=https://nameless-shore-33653.herokuapp.com/LogginApproved`;\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n  const checkSigned = async () => {\r\n    try {\r\n      const signed = await axios.get(\r\n        `${process.env.REACT_APP_SERVER_URL}/authentication/checkSigned`,\r\n        {\r\n          withCredentials: true,\r\n        }\r\n      );\r\n      setSigned(signed.data);\r\n      getAccDetails();\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    checkSigned();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    searchBarRef.current.focus();\r\n  }, [mobileSearchBar]);\r\n  return (\r\n    <AppBar\r\n      position=\"static\"\r\n      style={{\r\n        backgroundColor: '#032541',\r\n      }}\r\n    >\r\n      <Container className=\"navBarContentContainer\">\r\n        <Toolbar className={classes.root}>\r\n          <div style={{ display: 'flex', alignItems: 'center' }}>\r\n            <HamburgerMenu />\r\n\r\n            <Link\r\n              className=\"logoPhone\"\r\n              to=\"/\"\r\n              style={{\r\n                display: 'none',\r\n              }}\r\n            >\r\n              <img src={logo} alt=\"logo\"></img>\r\n            </Link>\r\n\r\n            <div className={classes.logoAndDiscover}>\r\n              <Link\r\n                to=\"/\"\r\n                style={{\r\n                  color: 'white',\r\n                  textDecoration: 'none',\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                }}\r\n              >\r\n                <img src={logo} alt=\"logo\"></img>\r\n              </Link>\r\n              <div className=\"subMenuContainer\">\r\n                <Typography className=\"discoverHover\" variant=\"body1\">\r\n                  Movies\r\n                </Typography>\r\n                <Box className=\"subMenu\" component=\"div\">\r\n                  <Link\r\n                    to={{\r\n                      pathname: '/discover',\r\n                      state: {\r\n                        sortOption: 'popularity.desc',\r\n                        mediaType: false,\r\n                      },\r\n                    }}\r\n                    style={{ color: 'black', textDecoration: 'none' }}\r\n                  >\r\n                    <Typography className=\"subMenuItem\">Popular</Typography>\r\n                  </Link>\r\n\r\n                  <Link\r\n                    to={{\r\n                      pathname: '/discover',\r\n                      state: {\r\n                        sortOption: 'vote_average.desc',\r\n                        mediaType: false,\r\n                      },\r\n                    }}\r\n                    style={{ color: 'black', textDecoration: 'none' }}\r\n                  >\r\n                    <Typography className=\"subMenuItem\">Top Rated</Typography>\r\n                  </Link>\r\n                  <Link\r\n                    to={{\r\n                      pathname: '/discover',\r\n                      state: {\r\n                        sortOption: 'release_date.desc',\r\n                        mediaType: false,\r\n                      },\r\n                    }}\r\n                    style={{ color: 'black', textDecoration: 'none' }}\r\n                  >\r\n                    <Typography className=\"subMenuItem\">New</Typography>\r\n                  </Link>\r\n                  <Link\r\n                    to={{\r\n                      pathname: '/discover',\r\n                      state: {\r\n                        sortOption: 'vote_count.desc',\r\n                        mediaType: false,\r\n                      },\r\n                    }}\r\n                    style={{ color: 'black', textDecoration: 'none' }}\r\n                  >\r\n                    <Typography className=\"subMenuItem\">Discover</Typography>\r\n                  </Link>\r\n                </Box>\r\n              </div>\r\n\r\n              <div className=\"subMenuContainer\">\r\n                <Typography className=\"discoverHover\" variant=\"body1\">\r\n                  TV Shows\r\n                </Typography>\r\n                <Box className=\"subMenu\" component=\"div\">\r\n                  <Link\r\n                    to={{\r\n                      pathname: '/discover',\r\n                      state: {\r\n                        sortOption: 'popularity.desc',\r\n                        mediaType: true,\r\n                      },\r\n                    }}\r\n                    style={{ color: 'black', textDecoration: 'none' }}\r\n                  >\r\n                    <Typography className=\"subMenuItem\">Popular</Typography>\r\n                  </Link>\r\n\r\n                  <Link\r\n                    to={{\r\n                      pathname: '/discover',\r\n                      state: {\r\n                        sortOption: 'vote_average.desc',\r\n                        mediaType: true,\r\n                      },\r\n                    }}\r\n                    style={{ color: 'black', textDecoration: 'none' }}\r\n                  >\r\n                    <Typography className=\"subMenuItem\">Top Rated</Typography>\r\n                  </Link>\r\n                  <Link\r\n                    to={{\r\n                      pathname: '/discover',\r\n                      state: {\r\n                        sortOption: 'release_date.desc',\r\n                        mediaType: true,\r\n                      },\r\n                    }}\r\n                    style={{ color: 'black', textDecoration: 'none' }}\r\n                  >\r\n                    <Typography className=\"subMenuItem\">New</Typography>\r\n                  </Link>\r\n                  <Link\r\n                    to={{\r\n                      pathname: '/discover',\r\n                      state: {\r\n                        sortOption: 'vote_count.desc',\r\n                        mediaType: true,\r\n                      },\r\n                    }}\r\n                    style={{ color: 'black', textDecoration: 'none' }}\r\n                  >\r\n                    <Typography className=\"subMenuItem\">Discover</Typography>\r\n                  </Link>\r\n                </Box>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <form\r\n            onSubmit={(e) => {\r\n              e.preventDefault();\r\n\r\n              history.push({\r\n                pathname: `/search/${searchQuery}`,\r\n\r\n                state: searchQuery,\r\n              });\r\n              setSearchQuery('');\r\n              setMobileSearchBar(false);\r\n            }}\r\n          >\r\n            <InputBase\r\n              value={searchQuery}\r\n              onChange={(e) => {\r\n                setSearchQuery(e.target.value);\r\n              }}\r\n              autoFocus\r\n              ref={searchBarRef}\r\n              className={\r\n                mobileSearchBar\r\n                  ? classes.searchInputBaseOn\r\n                  : classes.searchInputBase\r\n              }\r\n              placeholder=\"Search ZMDBi\"\r\n              endAdornment={\r\n                <Button\r\n                  variant=\"text\"\r\n                  onClick={() => setMobileSearchBar(false)}\r\n                >\r\n                  <CloseIcon />\r\n                </Button>\r\n              }\r\n            />\r\n          </form>\r\n          <form\r\n            className={classes.searchField}\r\n            onSubmit={(e) => {\r\n              e.preventDefault();\r\n\r\n              history.push({\r\n                pathname: `/search/${searchQuery}`,\r\n\r\n                state: searchQuery,\r\n              });\r\n              setSearchQuery('');\r\n            }}\r\n          >\r\n            <TextField\r\n              placeholder=\"Search ZMDBi\"\r\n              variant=\"outlined\"\r\n              className={classes.searchField}\r\n              value={searchQuery}\r\n              color=\"primary\"\r\n              onChange={(e) => {\r\n                setSearchQuery(e.target.value);\r\n              }}\r\n              InputProps={{\r\n                endAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <Button\r\n                      type=\"submit\"\r\n                      variant=\"text\"\r\n                      style={{\r\n                        backgroundColor: 'transparent',\r\n                        padding: 0,\r\n                        marginRight: '5px',\r\n                        maxWidth: '10px',\r\n                        minWidth: '10px',\r\n                      }}\r\n                    >\r\n                      <SearchIcon />\r\n                    </Button>\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n            ></TextField>\r\n          </form>\r\n          {console.log('isMobile: ', isMobile, 'signed: ', signed)}\r\n          {isMobile ||\r\n            (signed ? (\r\n              <div className={classes.userWhole}>\r\n                <Typography\r\n                  style={{ marginRight: '10px' }}\r\n                  className={classes.userName}\r\n                >\r\n                  {username}\r\n                </Typography>\r\n\r\n                <Box className={classes.userMenu} component=\"div\">\r\n                  {' '}\r\n                  <Button onClick={() => logout()} variant=\"text\">\r\n                    Logout\r\n                  </Button>\r\n                </Box>\r\n              </div>\r\n            ) : (\r\n              <Button\r\n                onClick={() => login()}\r\n                variant=\"text\"\r\n                style={{ marginTop: '2px', backgroundColor: 'transparent' }}\r\n              >\r\n                {console.log('ICH BINS')}\r\n                <Typography variant=\"body1\" style={{ color: 'white' }}>\r\n                  Login\r\n                </Typography>\r\n              </Button>\r\n            ))}\r\n\r\n          {isMobile && (\r\n            <Box style={{ position: 'relative', display: 'flex' }}>\r\n              <Button\r\n                style={{ position: 'relative' }}\r\n                variant=\"text\"\r\n                onClick={() => setShowMobileUserMenu(!showUserMenu)}\r\n              >\r\n                {signed ? username : <PersonIcon />}\r\n\r\n                {signed\r\n                  ? showMobileUserMenu && (\r\n                      <ClickAwayListener\r\n                        onClickAway={() =>\r\n                          setShowMobileUserMenu(!showMobileUserMenu)\r\n                        }\r\n                      >\r\n                        <Box className={classes.userMenuMobileSigned}>\r\n                          <Button onClick={() => logout()}>Logout</Button>\r\n                        </Box>\r\n                      </ClickAwayListener>\r\n                    )\r\n                  : showMobileUserMenu && (\r\n                      <ClickAwayListener\r\n                        onClickAway={() =>\r\n                          setShowMobileUserMenu(!showMobileUserMenu)\r\n                        }\r\n                      >\r\n                        <Box className={classes.userMenuMobileUnsigned}>\r\n                          <Button onClick={() => login()}>Login</Button>\r\n                          <Button\r\n                            onClick={() =>\r\n                              window.open('https://www.themoviedb.org/signup')\r\n                            }\r\n                          >\r\n                            Register\r\n                          </Button>\r\n                        </Box>\r\n                      </ClickAwayListener>\r\n                    )}\r\n              </Button>\r\n              <Button\r\n                onClick={() => {\r\n                  setMobileSearchBar(true);\r\n                }}\r\n                variant=\"text\"\r\n                style={{\r\n                  padding: '0',\r\n                  backgroundColor: 'transparent',\r\n                }}\r\n              >\r\n                <SearchIcon />\r\n              </Button>\r\n            </Box>\r\n          )}\r\n        </Toolbar>\r\n      </Container>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\Discover\\DiscoverPage.js",["175"],"import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport { useDiscover, useDiscoverUpdate } from '../../contexts/DiscoverContext';\r\nimport { useLocation } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport MovieCard from '../shared/MovieCard';\r\nimport '../../index.css';\r\nimport { useMediaQuery } from '@material-ui/core';\r\nimport { Grid, Container, Button, Typography, Box } from '@material-ui/core';\r\nimport './style.scss';\r\nimport Searcher from './Searcher/Searcher';\r\nimport MovieCardPhone from './MovieCardPhone';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  movie: {\r\n    maxWidth: '238px',\r\n  },\r\n  cardsGrid: {\r\n    marginLeft: '30px',\r\n    justifyContent: 'flex-start',\r\n    [theme.breakpoints.down('760')]: {\r\n      marginLeft: 0,\r\n      padding: '0px',\r\n      justifyContent: 'center',\r\n    },\r\n  },\r\n  posts: {\r\n    [theme.breakpoints.down('600')]: {\r\n      marginTop: '30px',\r\n    },\r\n  },\r\n}));\r\n\r\nconst MainPage = () => {\r\n  const location = useLocation();\r\n\r\n  const isMobile = useMediaQuery('(max-width:600px)');\r\n\r\n  const posts = useDiscover();\r\n  const setPosts = useDiscoverUpdate();\r\n\r\n  const [postsLoaded, setPostsLoaded] = useState(false);\r\n\r\n  const classes = useStyles();\r\n  const date = new Date();\r\n  const [sortOption, setSortOption] = useState(location.state.sortOption);\r\n  const [page, setPage] = useState(1);\r\n  const [releaseDate, setReleaseDate] = useState([\r\n    1900,\r\n    parseInt(date.toISOString().slice(0, 4)),\r\n  ]);\r\n\r\n  const [score, setScore] = useState([0, 10]);\r\n  const [genres, setGenres] = useState(' ');\r\n  const [runtime, setRuntime] = useState([0, 360]);\r\n  const [totalPages, setTotalPages] = useState(0);\r\n  const [totalResults, setTotalResults] = useState(0);\r\n  const [language, setLanguage] = useState('en');\r\n\r\n  const [loadContent, setLoadContent] = useState(false);\r\n\r\n  const [mediaType, setMediaType] = useState(location.state.mediaType);\r\n\r\n  const submitHandle = async () => {\r\n    if (mediaType === false) {\r\n      const discoverResults = await axios.get(\r\n        `${process.env.REACT_APP_SERVER_URL}/media/movie/discover`,\r\n        {\r\n          params: {\r\n            sortOption,\r\n            page,\r\n\r\n            releaseDateMin: releaseDate[0] + '-12-31',\r\n            releaseDateMax: releaseDate[1] + '-12-31',\r\n            scoreMin: score[0],\r\n            scoreMax: score[1],\r\n            genres: genres.replace(' ', ''),\r\n            runtimeMin: runtime[0],\r\n            runtimeMax: runtime[1],\r\n            language,\r\n          },\r\n        }\r\n      );\r\n\r\n      setPage(1);\r\n      setTotalResults(discoverResults.data.total_results);\r\n      setTotalPages(discoverResults.data.total_pages);\r\n      setPosts(discoverResults.data.results);\r\n      setPostsLoaded(true);\r\n    } else {\r\n      const discoverResults = await axios.get(\r\n        `${process.env.REACT_APP_SERVER_URL}/media/tv/discover`,\r\n        {\r\n          params: {\r\n            sortOption,\r\n            page,\r\n            releaseDateMin: releaseDate[0] + '-12-31',\r\n            releaseDateMax: releaseDate[1] + '-12-31',\r\n            scoreMin: score[0],\r\n            scoreMax: score[1],\r\n            genres: genres.replace(' ', ''),\r\n            runtimeMin: runtime[0],\r\n            runtimeMax: runtime[1],\r\n            language,\r\n          },\r\n        }\r\n      );\r\n\r\n      setPage(1);\r\n      setTotalResults(discoverResults.data.total_results);\r\n      setTotalPages(discoverResults.data.total_pages);\r\n      setPosts(discoverResults.data.results);\r\n      setPostsLoaded(true);\r\n    }\r\n  };\r\n\r\n  const loadMore = async () => {\r\n    if (page + 1 <= totalPages) {\r\n      if (mediaType === false) {\r\n        const discoverResults = await axios.get(\r\n          `${process.env.REACT_APP_SERVER_URL}/media/movie/discover`,\r\n          {\r\n            params: {\r\n              sortOption,\r\n              page: page + 1,\r\n              releaseDateMin: releaseDate[0] + '-12-31',\r\n              releaseDateMax: releaseDate[1] + '-12-31',\r\n              scoreMin: score[0],\r\n              scoreMax: score[1],\r\n              genres: genres.replace(' ', ''),\r\n              runtimeMin: runtime[0],\r\n              runtimeMax: runtime[1],\r\n              language,\r\n            },\r\n          }\r\n        );\r\n\r\n        setPage(page + 1);\r\n        setPosts(posts.concat(discoverResults.data.results));\r\n      } else {\r\n        const discoverResults = await axios.get(\r\n          `${process.env.REACT_APP_SERVER_URL}/media/tv/discover`,\r\n          {\r\n            params: {\r\n              sortOption,\r\n              page: page + 1,\r\n              releaseDateMin: releaseDate[0] + '-01-01',\r\n              releaseDateMax: releaseDate[1] + '-12-31',\r\n              scoreMin: score[0],\r\n              scoreMax: score[1],\r\n              genres: genres.replace(' ', ''),\r\n              runtimeMin: runtime[0],\r\n              runtimeMax: runtime[1],\r\n              language,\r\n            },\r\n          }\r\n        );\r\n        setPage(page + 1);\r\n        setPosts(posts.concat(discoverResults.data.results));\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    submitHandle();\r\n    setLoadContent(false);\r\n  }, [loadContent]);\r\n\r\n  useEffect(() => {\r\n    setSortOption(location.state.sortOption);\r\n    setMediaType(location.state.mediaType);\r\n    setLoadContent(true);\r\n  }, [location.state.sortOption, location.state.mediaType]);\r\n\r\n  return (\r\n    <>\r\n      {postsLoaded ? (\r\n        <Container>\r\n          <div\r\n            style={{ display: 'flex', marginTop: '20px' }}\r\n            className=\"searcherAndResults\"\r\n          >\r\n            <Searcher\r\n              genres={genres}\r\n              setGenres={setGenres}\r\n              defaultSortMode={location.state.sortOption}\r\n              sortOption={sortOption}\r\n              setRuntime={setRuntime}\r\n              runtime={runtime}\r\n              setScore={setScore}\r\n              score={score}\r\n              submitHandle={submitHandle}\r\n              releaseDate={releaseDate}\r\n              setReleaseDate={setReleaseDate}\r\n              setSortOption={setSortOption}\r\n              setLanguage={setLanguage}\r\n              language={language}\r\n              setMediaType={setMediaType}\r\n              mediaType={mediaType}\r\n            />\r\n\r\n            <div\r\n              className={classes.posts}\r\n              style={{\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n              }}\r\n            >\r\n              {isMobile ? (\r\n                <Box>\r\n                  {posts.map((post) => (\r\n                    <MovieCardPhone mediaType={mediaType} mediaDetails={post} />\r\n                  ))}{' '}\r\n                  {totalPages > 1 && (\r\n                    <Button\r\n                      onClick={loadMore}\r\n                      variant=\"contained\"\r\n                      style={{\r\n                        width: '100%',\r\n                        display: 'block',\r\n                        borderRadius: '10px',\r\n                        height: '40px',\r\n                      }}\r\n                    >\r\n                      <Typography variant=\"h6\">\r\n                        Load More (\r\n                        {totalPages !== page ? totalResults - page * 20 : 0}{' '}\r\n                        results)\r\n                      </Typography>\r\n                    </Button>\r\n                  )}\r\n                </Box>\r\n              ) : (\r\n                <Grid container spacing={1} className={classes.cardsGrid}>\r\n                  {posts &&\r\n                    posts.map((post) => (\r\n                      <Grid\r\n                        lg={3}\r\n                        xs={6}\r\n                        sm={4}\r\n                        item\r\n                        className={classes.movie}\r\n                        key={post.id}\r\n                      >\r\n                        {mediaType === false ? (\r\n                          <MovieCard\r\n                            movie={post}\r\n                            imgWidth=\"200\"\r\n                            imgHeight=\"300\"\r\n                            mediaType=\"movie\"\r\n                          />\r\n                        ) : (\r\n                          <MovieCard\r\n                            movie={post}\r\n                            imgWidth=\"200\"\r\n                            imgHeight=\"300\"\r\n                            mediaType=\"tv\"\r\n                          />\r\n                        )}\r\n                      </Grid>\r\n                    ))}\r\n                  {totalPages > 1 && (\r\n                    <Button\r\n                      onClick={loadMore}\r\n                      variant=\"contained\"\r\n                      style={{\r\n                        width: '100%',\r\n                        display: 'block',\r\n                        borderRadius: '10px',\r\n                        height: '40px',\r\n                      }}\r\n                    >\r\n                      <Typography variant=\"h6\">\r\n                        Load More (\r\n                        {totalPages !== page ? totalResults - page * 20 : 0}{' '}\r\n                        results)\r\n                      </Typography>\r\n                    </Button>\r\n                  )}\r\n                </Grid>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </Container>\r\n      ) : (\r\n        <div className=\"spinner\"></div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\Credits\\Credits.js",[],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\shared\\Footer.js",[],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\MovieDetails\\MoviePage.js",["176","177"],"import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport Review from './Review';\r\nimport { Container, Typography, Button, Grid, Box } from '@material-ui/core';\r\n\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport { useMediaQuery } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport '../../linkStyle.scss';\r\nimport TopBilledCast from './TopBilledCast';\r\nimport TopMovie from './TopMovie';\r\nimport SideInfo from './SideInfo';\r\nimport './styles.scss';\r\nconst useStyles = makeStyles((theme) => ({\r\n  backrop: {\r\n    zIndex: 0,\r\n    position: 'absolute',\r\n    height: '632px',\r\n    backgroundRepeat: 'no-repeat',\r\n    backgroundPosition: 'center',\r\n    filter: 'brightness(25%)',\r\n    width: '100%',\r\n  },\r\n  backropMobile: {\r\n    zIndex: 0,\r\n    position: 'absolute',\r\n\r\n    [theme.breakpoints.down('600')]: {\r\n      top: 48,\r\n    },\r\n    [theme.breakpoints.down('500')]: {\r\n      top: 56,\r\n    },\r\n    height: '320px',\r\n    backgroundRepeat: 'no-repeat',\r\n    backgroundPosition: 'center',\r\n    filter: 'brightness(25%)',\r\n    width: '100%',\r\n  },\r\n  maxWidthXl: {\r\n    padding: 0,\r\n    maxWidth: '1170px',\r\n  },\r\n  container: {\r\n    backgroundColor: '#FAFAFA',\r\n  },\r\n}));\r\n\r\nconst MoviePage = () => {\r\n  const classes = useStyles();\r\n  const isMobile = useMediaQuery('(max-width: 600px)');\r\n  const { media_type, id } = useParams();\r\n  console.log(media_type);\r\n  const [movieDetails, setMovieDetails] = useState({});\r\n  const [reviews, setReviews] = useState([]);\r\n  const [credits, setCredits] = useState([]);\r\n  const [topBilledCast, setTopBilledCast] = useState([]);\r\n  const [director, setDirector] = useState('');\r\n\r\n  const [lodaded, setLoaded] = useState(false);\r\n\r\n  async function fetchMovie() {\r\n    try {\r\n      const details = await axios.get(\r\n        `${process.env.REACT_APP_SERVER_URL}/details/${media_type}`,\r\n        {\r\n          params: { id: id },\r\n        }\r\n      );\r\n      const reviews = await axios.get(\r\n        `${process.env.REACT_APP_SERVER_URL}/details/reviews/${media_type}`,\r\n        {\r\n          params: { id: id },\r\n        }\r\n      );\r\n      const credits = await axios.get(\r\n        `${process.env.REACT_APP_SERVER_URL}/details/credits/${media_type}`,\r\n        {\r\n          params: { id: id },\r\n        }\r\n      );\r\n\r\n      const topBilledCast = credits.data.cast\r\n        .sort((actor1, actor2) => actor1.popularity > actor2.popularity)\r\n        .slice(0, 10);\r\n      setTopBilledCast(topBilledCast);\r\n      const director = credits.data.crew.filter(\r\n        (crew) => crew.job === 'Director'\r\n      );\r\n\r\n      if (director.length > 0) {\r\n        setDirector(director[0]);\r\n      }\r\n\r\n      setCredits(credits.data);\r\n      setMovieDetails(details.data);\r\n      setReviews(reviews.data.results);\r\n\r\n      setLoaded(true);\r\n    } catch (e) {\r\n      try {\r\n        const details = await axios.get(\r\n          `${process.env.REACT_APP_SERVER_URL}/details/tv`,\r\n          {\r\n            params: { id: id },\r\n          }\r\n        );\r\n        const reviews = await axios.get(\r\n          `${process.env.REACT_APP_SERVER_URL}/details/reviews/tv`,\r\n          {\r\n            params: { id: id },\r\n          }\r\n        );\r\n        const credits = await axios.get(\r\n          `${process.env.REACT_APP_SERVER_URL}/details/credits/tv`,\r\n          {\r\n            params: { id: id },\r\n          }\r\n        );\r\n\r\n        const topBilledCast = credits.data.cast\r\n          .sort((actor) => actor.popularity > actor.popularity)\r\n          .slice(0, 10);\r\n        setTopBilledCast(topBilledCast);\r\n        const director = credits.data.crew.filter(\r\n          (crew) => crew.job === 'Director'\r\n        );\r\n\r\n        if (director.length > 0) {\r\n          setDirector(director[0]);\r\n        }\r\n\r\n        //filter to find director\r\n\r\n        setCredits(credits.data);\r\n        setMovieDetails(details.data);\r\n        setReviews(reviews.data.results);\r\n\r\n        setLoaded(true);\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    }\r\n\r\n    //filter to find top 10 cast by popularity\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchMovie();\r\n  }, []);\r\n  return lodaded ? (\r\n    <div>\r\n      {movieDetails.backdrop_path ? (\r\n        <div\r\n          className={isMobile ? classes.backropMobile : classes.backrop}\r\n          style={{\r\n            backgroundImage: isMobile\r\n              ? `url(https://image.tmdb.org/t/p/w780/${movieDetails.backdrop_path})`\r\n              : `url(https://image.tmdb.org/t/p/w1920_and_h800_multi_faces/${movieDetails.backdrop_path})`,\r\n          }}\r\n        ></div>\r\n      ) : (\r\n        <div\r\n          className={isMobile ? classes.backropMobile : classes.backrop}\r\n          style={{\r\n            backgroundColor: 'white',\r\n            width: isMobile ? '780px' : '1920px',\r\n          }}\r\n        ></div>\r\n      )}\r\n      <Container className={classes.container} maxWidth=\"lg\">\r\n        <TopMovie\r\n          mediaType={media_type}\r\n          movieDetails={movieDetails}\r\n          director={director}\r\n        />\r\n        {isMobile && (\r\n          <Box style={{ marginTop: '10px' }}>\r\n            <Typography variant=\"h5\">Overview</Typography>\r\n            <Typography className={classes.textStyle} variant=\"body2\">\r\n              {movieDetails.overview}\r\n            </Typography>\r\n          </Box>\r\n        )}\r\n\r\n        <Typography\r\n          variant=\"h5\"\r\n          style={{\r\n            marginTop: '20px',\r\n            marginBottom: '15px',\r\n          }}\r\n        >\r\n          Top Billed Cast\r\n        </Typography>\r\n\r\n        <Grid container>\r\n          <Grid item xs={12} sm={9}>\r\n            <TopBilledCast\r\n              movieDetails={movieDetails}\r\n              topBilledCast={topBilledCast}\r\n              credits={credits}\r\n            ></TopBilledCast>\r\n            <div style={{ marginTop: '20px' }}>\r\n              <Link\r\n                style={{ textDecoration: 'none' }}\r\n                to={{\r\n                  pathname: `/credits/${movieDetails.id}`,\r\n                  state: {\r\n                    credits: credits,\r\n                  },\r\n                }}\r\n              >\r\n                <Button>\r\n                  <Typography variant=\"h6\">Show Cast</Typography>\r\n                </Button>\r\n              </Link>\r\n            </div>\r\n            {reviews.length > 0 ? (\r\n              <Typography\r\n                variant=\"h6\"\r\n                style={{ marginTop: '20px', marginLeft: '7px' }}\r\n              >\r\n                Reviews ({reviews.length})\r\n              </Typography>\r\n            ) : (\r\n              <Typography style={{ marginTop: '20px', marginLeft: '7px' }}>\r\n                No Reviews\r\n              </Typography>\r\n            )}\r\n\r\n            {reviews &&\r\n              reviews.map((review) => (\r\n                <Review\r\n                  reviews={review}\r\n                  movieDetails={movieDetails}\r\n                  key={review.id}\r\n                />\r\n              ))}\r\n          </Grid>\r\n          <Grid item sm={3}>\r\n            {isMobile || (\r\n              <SideInfo\r\n                movieId={movieDetails.id}\r\n                movieDetails={movieDetails}\r\n                mediaType={media_type}\r\n              />\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </div>\r\n  ) : (\r\n    <div className=\"spinner\"></div>\r\n  );\r\n};\r\n\r\nexport default MoviePage;\r\n","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\LandingPage\\LandingPage.js",[],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\ActorPage\\ActorPage.js",["178"],"import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport { Container, Typography, Grid, Box } from '@material-ui/core';\r\nimport ActorCredits from './ActorCredits';\r\n\r\nimport '../../linkStyle.scss';\r\nimport ProfilePicHolder from '../../images/profile_pic_holder_long.png';\r\nimport NoImageHolderSmall from '../../images/no_image_holder_small.png';\r\nimport { useMediaQuery } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  topInfo: {\r\n    display: 'flex',\r\n  },\r\n  actorInfo: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'flex-start',\r\n    [theme.breakpoints.down('xs')]: {\r\n      marginLeft: '15px',\r\n    },\r\n  },\r\n  biography: {\r\n    paddingLeft: '10px',\r\n    [theme.breakpoints.down('xs')]: {\r\n      paddingLeft: '0px',\r\n    },\r\n  },\r\n}));\r\n\r\nconst ActorPage = () => {\r\n  let { personId } = useParams();\r\n  const classes = useStyles();\r\n  const [actorDetails, setActorDetails] = useState(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [allCredits, setAllCredits] = useState(null);\r\n  const [changedCredits, setChangedCredts] = useState(null);\r\n  const [creditsSortedByPopularity, setCreditsSortedByPopularity] =\r\n    useState(null);\r\n\r\n  const isMobile = useMediaQuery('(max-width: 600px)');\r\n  const isAlmostMobile = useMediaQuery('(max-width: 935px)');\r\n  const [crewCredits, setCrewCredits] = useState(null);\r\n\r\n  const currentYear = new Date().getFullYear();\r\n\r\n  const fetchActorDetails = async () => {\r\n    const actorDetails = await axios.get(\r\n      `${process.env.REACT_APP_SERVER_URL}/details/actor`,\r\n      {\r\n        params: { actorId: personId },\r\n      }\r\n    );\r\n\r\n    setActorDetails(actorDetails.data);\r\n  };\r\n\r\n  const fetchAllCredits = async () => {\r\n    const actorCredits = await axios.get(\r\n      `${process.env.REACT_APP_SERVER_URL}/details/actor/credits/all`,\r\n      {\r\n        params: { actorId: personId },\r\n      }\r\n    );\r\n    setAllCredits(actorCredits.data);\r\n  };\r\n\r\n  const sortByPopularity = () => {\r\n    const sortedCredits = allCredits.cast.sort((credit1, credit2) =>\r\n      credit1.popularity > credit2.popularity ? -1 : 1\r\n    );\r\n\r\n    setCreditsSortedByPopularity(sortedCredits.slice(0, 8));\r\n  };\r\n\r\n  const renameAndSortByReleaseDate = () => {\r\n    let changedCredits = allCredits.cast.map((credit) => {\r\n      if (credit.hasOwnProperty('first_air_date')) {\r\n        credit.release_date = credit.first_air_date;\r\n        if (credit.hasOwnProperty('name')) {\r\n          credit.title = credit.name;\r\n          delete credit.name;\r\n        }\r\n        delete credit.first_air_date;\r\n        return credit;\r\n      } else {\r\n        if (credit.release_date === undefined || credit.release_date === '') {\r\n          credit.release_date = '3000';\r\n        }\r\n        return credit;\r\n      }\r\n    });\r\n    changedCredits = changedCredits.sort((credit1, credit2) =>\r\n      Number(credit1.release_date.slice(0, 4)) >\r\n      Number(credit2.release_date.slice(0, 4))\r\n        ? -1\r\n        : 1\r\n    );\r\n\r\n    let changedCrewCredits = allCredits.crew.map((credit) => {\r\n      if (credit.hasOwnProperty('first_air_date')) {\r\n        credit.release_date = credit.first_air_date;\r\n        if (credit.hasOwnProperty('name')) {\r\n          credit.title = credit.name;\r\n          delete credit.name;\r\n        }\r\n        delete credit.first_air_date;\r\n        return credit;\r\n      } else {\r\n        if (credit.release_date === undefined || credit.release_date === '') {\r\n          credit.release_date = '3000';\r\n        }\r\n        return credit;\r\n      }\r\n    });\r\n    changedCrewCredits = changedCrewCredits.sort((credit1, credit2) =>\r\n      Number(credit1.release_date.slice(0, 4)) >\r\n      Number(credit2.release_date.slice(0, 4))\r\n        ? -1\r\n        : 1\r\n    );\r\n    setCrewCredits(changedCrewCredits);\r\n    setChangedCredts(changedCredits);\r\n    setAllCredits(null);\r\n  };\r\n\r\n  if (allCredits) {\r\n    renameAndSortByReleaseDate();\r\n    sortByPopularity();\r\n\r\n    setIsLoaded(true);\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchActorDetails();\r\n    fetchAllCredits();\r\n  }, []);\r\n\r\n  return isLoaded ? (\r\n    <Container>\r\n      {actorDetails && (\r\n        <Grid\r\n          spacing={1}\r\n          container\r\n          style={{ display: 'flex', marginTop: '20px' }}\r\n        >\r\n          <Grid\r\n            item\r\n            xs={12}\r\n            sm={4}\r\n            md={4}\r\n            lg={3}\r\n            className={isMobile && classes.topInfo}\r\n          >\r\n            {actorDetails.profile_path ? (\r\n              <div>\r\n                <img\r\n                  alt={actorDetails.name}\r\n                  style={{ borderRadius: '5px' }}\r\n                  src={\r\n                    isAlmostMobile\r\n                      ? `https://www.themoviedb.org/t/p/w185/${actorDetails.profile_path}`\r\n                      : `https://www.themoviedb.org/t/p/w300/${actorDetails.profile_path}`\r\n                  }\r\n                ></img>\r\n              </div>\r\n            ) : (\r\n              <img\r\n                alt={actorDetails.name}\r\n                style={{\r\n                  borderRadius: '5px',\r\n                  width: isAlmostMobile ? '185px' : '300px',\r\n                  height: isAlmostMobile ? '278px' : '450px',\r\n                }}\r\n                src={ProfilePicHolder}\r\n              ></img>\r\n            )}\r\n            <div className={classes.actorInfo}>\r\n              {isMobile && (\r\n                <Typography\r\n                  variant=\"h5\"\r\n                  className=\"actorName\"\r\n                  style={{ fontWeight: 600 }}\r\n                  gutterBottom\r\n                >\r\n                  {actorDetails.name}\r\n                </Typography>\r\n              )}\r\n\r\n              <Box>\r\n                <Typography color=\"primary\" variant=\"subtitle1\">\r\n                  Known For{' '}\r\n                </Typography>\r\n                <Typography variant=\"subtitle2\">\r\n                  {actorDetails.known_for_department\r\n                    ? actorDetails.known_for_department\r\n                    : '-'}\r\n                </Typography>\r\n              </Box>\r\n              <Box>\r\n                <Typography color=\"primary\" variant=\"subtitle1\">\r\n                  Gender{' '}\r\n                </Typography>\r\n                <Typography variant=\"subtitle2\">\r\n                  {actorDetails.gender === 1 ? 'Female' : 'Male'}\r\n                </Typography>\r\n              </Box>\r\n              {actorDetails.deathday ? (\r\n                <Box>\r\n                  <Typography color=\"primary\" variant=\"subtitle1\">\r\n                    Birthday\r\n                  </Typography>\r\n                  <Typography variant=\"subtitle2\">\r\n                    {actorDetails.birthday ? (\r\n                      <div>\r\n                        {actorDetails.birthday} (died at{' '}\r\n                        {Number(\r\n                          actorDetails.deathday.slice(0, 4) -\r\n                            actorDetails.birthday.slice(0, 4)\r\n                        )}{' '}\r\n                        years old)\r\n                      </div>\r\n                    ) : (\r\n                      '-'\r\n                    )}\r\n                  </Typography>\r\n                </Box>\r\n              ) : (\r\n                <Box>\r\n                  <Typography color=\"primary\" variant=\"subtitle1\">\r\n                    Birthday\r\n                  </Typography>\r\n                  <Typography variant=\"subtitle2\">\r\n                    {actorDetails.birthday ? (\r\n                      <div>\r\n                        {actorDetails.birthday} (\r\n                        {Number(\r\n                          currentYear - actorDetails.birthday.slice(0, 4)\r\n                        )}{' '}\r\n                        years old)\r\n                      </div>\r\n                    ) : (\r\n                      '-'\r\n                    )}\r\n                  </Typography>\r\n                </Box>\r\n              )}\r\n\r\n              <Box>\r\n                <Typography color=\"primary\" variant=\"subtitle1\">\r\n                  Place of Birth{' '}\r\n                </Typography>\r\n                <Typography variant=\"subtitle2\">\r\n                  {actorDetails.place_of_birth\r\n                    ? actorDetails.place_of_birth\r\n                    : '-'}\r\n                </Typography>\r\n              </Box>\r\n            </div>\r\n          </Grid>\r\n          <Grid item xs={12} sm={7} md={8} lg={9}>\r\n            <div className={classes.biography}>\r\n              {!isMobile && (\r\n                <Typography\r\n                  variant=\"h4\"\r\n                  style={{ fontWeight: 600 }}\r\n                  gutterBottom\r\n                >\r\n                  {actorDetails.name}\r\n                </Typography>\r\n              )}\r\n              <div>\r\n                <Typography\r\n                  variant=\"h6\"\r\n                  gutterBottom\r\n                  style={{ fontWeight: 600 }}\r\n                >\r\n                  Biography{' '}\r\n                </Typography>\r\n                <Typography variant=\"body2\" gutterBottom>\r\n                  {actorDetails.biography\r\n                    ? actorDetails.biography\r\n                    : 'No biography'}\r\n                </Typography>\r\n              </div>\r\n            </div>\r\n            {creditsSortedByPopularity.length > 0 && (\r\n              <div>\r\n                <Typography\r\n                  variant=\"h5\"\r\n                  style={{ marginBottom: '15px', marginLeft: '10px' }}\r\n                >\r\n                  Known For\r\n                </Typography>\r\n                <div\r\n                  style={{\r\n                    display: 'flex',\r\n                    overflowX: 'scroll',\r\n                    width: 'auto',\r\n                  }}\r\n                >\r\n                  {creditsSortedByPopularity.map((credit) => (\r\n                    <div\r\n                      style={{ margin: '10px', width: '150px' }}\r\n                      key={credit.credit_id}\r\n                    >\r\n                      <Link\r\n                        style={{ textDecoration: 'none', color: 'black' }}\r\n                        to={{\r\n                          pathname: `/details/${credit.media_type}/${credit.id}`,\r\n                        }}\r\n                      >\r\n                        {credit.poster_path ? (\r\n                          <img\r\n                            alt={credit.title}\r\n                            style={{ borderRadius: '5px' }}\r\n                            src={`https://www.themoviedb.org/t/p/w150_and_h225_bestv2${credit.poster_path}`}\r\n                          />\r\n                        ) : (\r\n                          <img\r\n                            alt={credit.title}\r\n                            style={{ borderRadius: '5px' }}\r\n                            src={NoImageHolderSmall}\r\n                          />\r\n                        )}\r\n\r\n                        <Typography className=\"hoverLink\">\r\n                          {credit.title}\r\n                        </Typography>\r\n                      </Link>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            <ActorCredits\r\n              changedCredits={changedCredits}\r\n              crewCredits={crewCredits}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n    </Container>\r\n  ) : (\r\n    <div className=\"spinner\"></div>\r\n  );\r\n};\r\n\r\nexport default ActorPage;\r\n","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\SearchPage\\SearchResults.js",["179","180"],"import React, { useEffect, useState } from 'react';\r\nimport { useHistory, useLocation, Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nimport SearchResultsSide from './SearchResultsSide';\r\nimport PageNumNav from './PageNumNav';\r\nimport { Container, Grid, Typography, Paper } from '@material-ui/core';\r\nimport '../../index.css';\r\nimport profilePicHolder from '../../images/profile_pic_holder_w92.png';\r\nimport posterHolder from '../../images/no_image_holder_w92.png';\r\n\r\nconst SearchResults = () => {\r\n  const history = useHistory();\r\n\r\n  const location = useLocation();\r\n  const [searchedMovies, setSearchedMovies] = useState(null);\r\n  const [searchedTv, setSearchedTv] = useState(null);\r\n  const [searchedPeople, setSearchedPeople] = useState(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [resultsType, setResultsType] = useState('Movies');\r\n\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  const [totalResultsMovies, setTotalResultsMovies] = useState(0);\r\n  const [totalPagesMovies, setTotalPagesMovies] = useState(0);\r\n  const [totalResultsTv, setTotalResultsTv] = useState(0);\r\n  const [totalPagesTv, setTotalPagesTv] = useState(0);\r\n  const [totalResultsPeople, setTotalResultsPeople] = useState(0);\r\n  const [totalPagesPeople, setTotalPagesPeople] = useState(0);\r\n\r\n  const fetchMovies = async () => {\r\n    const searchedMovies = await axios.get(\r\n      'http://localhost:5000/search/movie',\r\n      {\r\n        params: {\r\n          searchQuery: history.location.state,\r\n          page: currentPage,\r\n        },\r\n      }\r\n    );\r\n    setSearchedMovies(searchedMovies.data.results);\r\n    setTotalResultsMovies(searchedMovies.data.total_results);\r\n    setTotalPagesMovies(searchedMovies.data.total_pages);\r\n  };\r\n  const fetchTv = async () => {\r\n    const searchedTv = await axios.get('http://localhost:5000/search/tv', {\r\n      params: {\r\n        searchQuery: history.location.state,\r\n        page: currentPage,\r\n      },\r\n    });\r\n    setSearchedTv(searchedTv.data.results);\r\n    setTotalResultsTv(searchedTv.data.total_results);\r\n    setTotalPagesTv(searchedTv.data.total_pages);\r\n  };\r\n  const fetchPeople = async () => {\r\n    const searchedPeople = await axios.get(\r\n      'http://localhost:5000/search/people',\r\n      {\r\n        params: {\r\n          searchQuery: history.location.state,\r\n          page: currentPage,\r\n        },\r\n      }\r\n    );\r\n    console.log('TV', searchedPeople);\r\n    setSearchedPeople(searchedPeople.data.results);\r\n    setTotalResultsPeople(searchedPeople.data.total_results);\r\n    setTotalPagesPeople(searchedPeople.data.total_pages);\r\n  };\r\n\r\n  console.log(searchedMovies);\r\n  console.log(searchedTv);\r\n  console.log(searchedPeople);\r\n\r\n  useEffect(() => {\r\n    fetchMovies();\r\n    fetchTv();\r\n    fetchPeople();\r\n    setIsLoaded(true);\r\n  }, [location.state]);\r\n\r\n  useEffect(() => {\r\n    if (resultsType === 'Movies') {\r\n      fetchMovies();\r\n    } else if (resultsType === 'TV') {\r\n      fetchTv();\r\n    } else if (resultsType === 'People') {\r\n      fetchPeople();\r\n    }\r\n  }, [currentPage]);\r\n\r\n  return (\r\n    <Container style={{ marginTop: '30px', minHeight: '60vh' }}>\r\n      {isLoaded ? (\r\n        <Grid container style={{ justifyContent: 'flex-end' }}>\r\n          <Grid xs={12} sm={5} md={4} lg={3}>\r\n            <SearchResultsSide\r\n              totalResultsMovies={totalResultsMovies}\r\n              totalResultsPeople={totalResultsPeople}\r\n              totalResultsTv={totalResultsTv}\r\n              setResultsType={setResultsType}\r\n              setCurrentPage={setCurrentPage}\r\n            />\r\n          </Grid>\r\n          <Grid xs={12} sm={7} md={8} lg={9}>\r\n            {resultsType === 'Movies' && (\r\n              <div>\r\n                {console.log('SEARVHD MOIS', searchedMovies)}\r\n                {searchedMovies &&\r\n                  searchedMovies.map((movie) => (\r\n                    <Paper\r\n                      key={movie.id}\r\n                      style={{\r\n                        display: 'flex',\r\n                        marginBottom: '15px',\r\n                      }}\r\n                    >\r\n                      {console.log(movie)}\r\n                      <Link\r\n                        to={`/details/movie/${movie.id}`}\r\n                        style={{ height: '137px' }}\r\n                      >\r\n                        {movie.poster_path ? (\r\n                          <img\r\n                            alt={movie.title}\r\n                            className=\"searchPic\"\r\n                            src={`https://image.tmdb.org/t/p/w92/${movie.poster_path}`}\r\n                          ></img>\r\n                        ) : (\r\n                          <img\r\n                            className=\"searchPic\"\r\n                            src={posterHolder}\r\n                            alt={movie.title}\r\n                          ></img>\r\n                        )}\r\n                      </Link>\r\n                      <div>\r\n                        <Link\r\n                          to={`/details/movie/${movie.id}`}\r\n                          style={{\r\n                            textDecoration: 'none',\r\n                          }}\r\n                        >\r\n                          <Typography\r\n                            className=\"hoverStyleTitle\"\r\n                            variant=\"h6\"\r\n                            style={{\r\n                              margin: '5px 0px 5px 10px',\r\n                              color: 'black',\r\n                            }}\r\n                          >\r\n                            {movie.title}\r\n                          </Typography>\r\n                        </Link>\r\n                        {movie.release_date ? (\r\n                          <Typography style={{ margin: '5px 0px 5px 10px' }}>\r\n                            {movie.release_date.slice(0, 4)}\r\n                          </Typography>\r\n                        ) : (\r\n                          <Typography style={{ margin: '5px 0px 5px 10px' }}>\r\n                            Not Released\r\n                          </Typography>\r\n                        )}\r\n                      </div>\r\n                    </Paper>\r\n                  ))}\r\n                <PageNumNav\r\n                  setCurrentPage={setCurrentPage}\r\n                  currentPage={currentPage}\r\n                  totalPages={totalPagesMovies}\r\n                />\r\n              </div>\r\n            )}\r\n            {resultsType === 'TV' && (\r\n              <div>\r\n                {searchedTv.map((tv) => (\r\n                  <Paper\r\n                    style={{\r\n                      display: 'flex',\r\n                      marginBottom: '15px',\r\n                    }}\r\n                  >\r\n                    {console.log(tv)}\r\n                    <Link\r\n                      to={`/details/tv/${tv.id}`}\r\n                      style={{ height: '137px' }}\r\n                    >\r\n                      {tv.poster_path ? (\r\n                        <img\r\n                          alt={tv.name}\r\n                          className=\"searchPic\"\r\n                          src={`https://image.tmdb.org/t/p/w92/${tv.poster_path}`}\r\n                        ></img>\r\n                      ) : (\r\n                        <img\r\n                          className=\"searchPic\"\r\n                          src={posterHolder}\r\n                          alt={tv.name}\r\n                        ></img>\r\n                      )}\r\n                    </Link>\r\n                    <div>\r\n                      <Link\r\n                        to={`/details/movie/${tv.id}`}\r\n                        style={{ color: 'black', textDecoration: 'none' }}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          className=\"hoverStyleTitle\"\r\n                          style={{ margin: '5px 0px 5px 10px' }}\r\n                        >\r\n                          {tv.name}\r\n                        </Typography>\r\n                      </Link>\r\n                      {tv.first_air_date ? (\r\n                        <Typography style={{ margin: '5px 0px 5px 10px' }}>\r\n                          {tv.first_air_date.slice(0, 4)}\r\n                        </Typography>\r\n                      ) : (\r\n                        <Typography style={{ margin: '5px 0px 5px 10px' }}>\r\n                          Not Released\r\n                        </Typography>\r\n                      )}\r\n                    </div>\r\n                  </Paper>\r\n                ))}\r\n                <PageNumNav\r\n                  setCurrentPage={setCurrentPage}\r\n                  currentPage={currentPage}\r\n                  totalPages={totalPagesTv}\r\n                />\r\n              </div>\r\n            )}\r\n            {resultsType === 'People' && (\r\n              <div>\r\n                {searchedPeople.map((person) => (\r\n                  <Paper\r\n                    style={{\r\n                      display: 'flex',\r\n                      marginBottom: '15px',\r\n                    }}\r\n                  >\r\n                    {console.log(person)}\r\n                    <Link\r\n                      to={`/person/${person.id}`}\r\n                      style={{ height: '137px' }}\r\n                    >\r\n                      {person.profile_path ? (\r\n                        <img\r\n                          className=\"searchPic\"\r\n                          alt={person.name}\r\n                          src={`https://image.tmdb.org/t/p/w92/${person.profile_path}`}\r\n                        ></img>\r\n                      ) : (\r\n                        <img\r\n                          className=\"searchPic\"\r\n                          src={profilePicHolder}\r\n                          alt={person.name}\r\n                        ></img>\r\n                      )}\r\n                    </Link>\r\n                    <div>\r\n                      <Link\r\n                        to={`/person/${person.id}`}\r\n                        style={{ color: 'black', textDecoration: 'none' }}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          className=\"hoverStyleTitle\"\r\n                          style={{ margin: '5px 0px 5px 10px' }}\r\n                        >\r\n                          {person.name}\r\n                        </Typography>\r\n                      </Link>\r\n                      <Typography style={{ margin: '5px 0px 5px 10px' }}>\r\n                        {person.known_for_department}\r\n                      </Typography>\r\n                    </div>\r\n                  </Paper>\r\n                ))}\r\n                <PageNumNav\r\n                  setCurrentPage={setCurrentPage}\r\n                  currentPage={currentPage}\r\n                  totalPages={totalPagesPeople}\r\n                />\r\n              </div>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n      ) : (\r\n        <div className=\"spinner\"></div>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default SearchResults;\r\n","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\shared\\HamburgerMenu.js",[],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\shared\\kategorieTeilung.js",["181"],"export function kategorieTeilung(credits) {\r\n  let categories = {\r\n    production: [],\r\n    art: [],\r\n    crewMembers: [],\r\n    costume: [],\r\n    camera: [],\r\n    directing: [],\r\n    editing: [],\r\n    lighting: [],\r\n    sound: [],\r\n    visualEffects: [],\r\n    writing: [],\r\n  };\r\n\r\n  credits.map((crew) => {\r\n    if (crew.department === \"Production\") {\r\n      categories.production.push(crew);\r\n    } else if (crew.department === \"Art\") {\r\n      categories.art.push(crew);\r\n    } else if (crew.department === \"Crew\") {\r\n      categories.crewMembers.push(crew);\r\n    } else if (crew.department === \"Costume & Make-Up\") {\r\n      categories.costume.push(crew);\r\n    } else if (crew.department === \"Camera\") {\r\n      categories.camera.push(crew);\r\n    } else if (crew.department === \"Directing\") {\r\n      categories.directing.push(crew);\r\n    } else if (crew.department === \"Editing\") {\r\n      categories.editing.push(crew);\r\n    } else if (crew.department === \"Lighting\") {\r\n      categories.lighting.push(crew);\r\n    } else if (crew.department === \"Sound\") {\r\n      categories.sound.push(crew);\r\n    } else if (crew.department === \"Visual Effects\") {\r\n      categories.visualEffects.push(crew);\r\n    } else if (crew.department === \"Writing\") {\r\n      categories.writing.push(crew);\r\n    }\r\n  });\r\n  return categories;\r\n}\r\n","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\MovieDetails\\Review.js",[],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\shared\\MovieCard.js",["182"],"import React, { useState } from 'react';\r\nimport './style.scss';\r\nimport {\r\n  Typography,\r\n  Card,\r\n  CardMedia,\r\n  CardContent,\r\n  IconButton,\r\n  Box,\r\n  ClickAwayListener,\r\n} from '@material-ui/core';\r\nimport noImageHolder from '../../images/no_image_holder.png';\r\nimport { Link } from 'react-router-dom';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport RatingWheel from '../LandingPage/RatingWheel';\r\nimport { useUserId } from '../../contexts/SignedContext';\r\n\r\nimport MovieDropLoggedOut from './MovieDropLoggedOut';\r\nimport MovieDropLogged from './MovieDropLogged';\r\nimport { useSigned } from '../../contexts/SignedContext';\r\nconst MovieCard = ({ movie, imgWidth, imgHeight, mediaType }) => {\r\n  const signed = useSigned();\r\n  const userId = useUserId();\r\n\r\n  let borderRadius;\r\n  let height;\r\n  let shadow;\r\n  let bgColor;\r\n  if (imgWidth === '200') {\r\n    borderRadius = 0;\r\n    height = 382;\r\n    shadow = '5px 5px 18px #DAD7D7';\r\n  } else {\r\n    bgColor = '#FAFAFA';\r\n    shadow = 'none';\r\n    borderRadius = 5;\r\n    height = 'auto';\r\n  }\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      backgroundColor: `${bgColor}`,\r\n      overflow: 'visible',\r\n      height: `${height}px`,\r\n      justifySelf: 'center',\r\n      margin: '15px',\r\n      position: 'relative',\r\n      boxShadow: `${shadow}`,\r\n      padding: 0,\r\n    },\r\n    cardMedia: {\r\n      width: `${imgWidth}px`,\r\n      height: `${imgHeight}px`,\r\n      borderRadius: '5px 5px 0 0',\r\n    },\r\n  }));\r\n\r\n  const [dropDown, setDropDown] = useState(false);\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <Card className={classes.root} key={movie.id}>\r\n      {imgWidth === '200' ? (\r\n        <RatingWheel\r\n          rating={(movie.vote_average * 10).toFixed()}\r\n          discover={true}\r\n        ></RatingWheel>\r\n      ) : (\r\n        <RatingWheel rating={(movie.vote_average * 10).toFixed()}></RatingWheel>\r\n      )}\r\n      <ClickAwayListener onClickAway={() => setDropDown(false)}>\r\n        <Box>\r\n          <IconButton\r\n            className=\"dropDownButton\"\r\n            disableFocusRipple\r\n            disableRipple\r\n            children={<MoreVertIcon />}\r\n            onClick={() => setDropDown(!dropDown)}\r\n            style={{\r\n              backgroundColor: 'rgba(255, 255, 255, 0.3)',\r\n              position: 'absolute',\r\n              right: '5px',\r\n              padding: '0px',\r\n              top: '5px',\r\n            }}\r\n          ></IconButton>\r\n          {dropDown && !signed && <MovieDropLoggedOut />}\r\n          {dropDown && signed && (\r\n            <MovieDropLogged\r\n              mediaType={mediaType}\r\n              movieId={movie.id}\r\n              userId={userId}\r\n            />\r\n          )}\r\n        </Box>\r\n      </ClickAwayListener>\r\n\r\n      <Link\r\n        style={{ width: '200px' }}\r\n        to={{\r\n          pathname: `/details/${mediaType}/${movie.id}`,\r\n        }}\r\n      >\r\n        {movie.poster_path ? (\r\n          <CardMedia\r\n            className={classes.cardMedia}\r\n            image={`https://image.tmdb.org/t/p/w${imgWidth}${movie.poster_path}`}\r\n            title={movie.title}\r\n          ></CardMedia>\r\n        ) : (\r\n          <CardMedia\r\n            className={classes.cardMedia}\r\n            image={noImageHolder}\r\n            title={movie.title}\r\n          ></CardMedia>\r\n        )}\r\n      </Link>\r\n      <CardContent style={{ padding: '0px', marginLeft: '3px' }}>\r\n        <Link\r\n          props={movie.id}\r\n          to={`/details/${mediaType}/${movie.id}/`}\r\n          style={{ textDecoration: 'none' }}\r\n        >\r\n          <Typography\r\n            className=\"hoverLink\"\r\n            variant=\"body2\"\r\n            color=\"textPrimary\"\r\n            component=\"p\"\r\n            style={{\r\n              '&:hover': { cursor: 'pointer' },\r\n              marginTop: '3px',\r\n            }}\r\n          >\r\n            {movie.title}\r\n            {movie.name}\r\n          </Typography>\r\n        </Link>\r\n        <Typography\r\n          variant=\"body2\"\r\n          color=\"textSecondary\"\r\n          component=\"p\"\r\n          style={{ verticalAlign: 'text-bottom' }}\r\n        >\r\n          {movie.first_air_date && movie.first_air_date.slice(0, 4)}\r\n          {movie.release_date && movie.release_date.slice(0, 4)}\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default MovieCard;\r\n","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\Credits\\CreditsPerson.js",[],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\MovieDetails\\TopBilledCast.js",[],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\Discover\\MovieCardPhone.js",[],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\MovieDetails\\TopMovie.js",["183"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport image_holder from \"../../images/no_image_holder.png\";\r\nimport { Grid, Box } from \"@material-ui/core\";\r\nimport { useMediaQuery } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../../linkStyle.scss\";\r\nimport \"./styles.scss\";\r\nimport MediaActions from \"./MediaActions\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  actorImage: {\r\n    borderRadius: \"5px 5px 0 0\",\r\n  },\r\n  container: {\r\n    backgroundColor: \"#EEEEEE\",\r\n  },\r\n  actorPaper: {\r\n    margin: \"10px\",\r\n  },\r\n  acotrSubtitle: {\r\n    fontSize: \"12px\",\r\n\r\n    fontWeight: \"bold\",\r\n    color: \"#757575\",\r\n  },\r\n  textStyle: {\r\n    margin: \"5px\",\r\n    marginLeft: \"15px\",\r\n  },\r\n  topMoviePhone: {\r\n    position: \"relative\",\r\n  },\r\n  sideInfo: {\r\n    overflow: \"hidden\",\r\n    color: \"white\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    position: \"relative\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n  movie_poster: {\r\n    [theme.breakpoints.down(\"md\")]: {\r\n      display: \"flex\",\r\n    },\r\n  },\r\n  gridImage: {\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      justifyContent: \"flex-start\",\r\n      display: \"flex\",\r\n      alignContent: \"flex-end\",\r\n      objectFit: \"contain\",\r\n    },\r\n  },\r\n  topMovieContainer: {\r\n    zIndex: 10,\r\n    display: \"flex\",\r\n    height: \"632px\",\r\n    alignItems: \"center\",\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      justifyContent: \"flex-start\",\r\n      height: \"320px\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst TopMovie = ({ movieDetails, director, writer, mediaType }) => {\r\n  const isMobile = useMediaQuery(\"(max-width: 600px)\");\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.topMovieContainer}>\r\n      <Grid container justify=\"flex-start\" style={{ flexWrap: \"nowrap\" }}>\r\n        <Grid\r\n          className={classes.gridImage}\r\n          item\r\n          style={{\r\n            display: \"flex\",\r\n\r\n            zIndex: 1,\r\n          }}\r\n        >\r\n          {movieDetails.poster_path ? (\r\n            <img\r\n              alt={movieDetails.title && movieDetails.name}\r\n              className={classes.movie_poster}\r\n              style={{\r\n                borderRadius: \"5px\",\r\n              }}\r\n              src={\r\n                isMobile\r\n                  ? `https://image.tmdb.org/t/p/w154${movieDetails.poster_path}`\r\n                  : `https://image.tmdb.org/t/p/w300${movieDetails.poster_path}`\r\n              }\r\n            ></img>\r\n          ) : (\r\n            <img\r\n              alt={movieDetails.title && movieDetails.name}\r\n              style={{\r\n                borderRadius: \"5px\",\r\n                width: isMobile ? \"154px\" : \"300px\",\r\n              }}\r\n              src={image_holder}\r\n            ></img>\r\n          )}\r\n        </Grid>\r\n        <Grid item className={classes.sideInfo}>\r\n          <Typography variant=\"h5\" className={classes.textStyle}>\r\n            {movieDetails.title && movieDetails.title}\r\n            {movieDetails.name && movieDetails.name}\r\n            {movieDetails.release_date &&\r\n              \" (\" + movieDetails.release_date.slice(0, 4) + \")\"}\r\n          </Typography>\r\n          {/* <MediaActions movieId={movieDetails.id} mediaType={mediaType} /> */}\r\n          <Typography\r\n            component=\"div\"\r\n            className={classes.textStyle}\r\n            style={{\r\n              display: \"flex\",\r\n              padding: 0,\r\n              alignContent: \"flex-start\",\r\n              flexWrap: \"wrap\",\r\n            }}\r\n          >\r\n            {movieDetails.genres &&\r\n              movieDetails.genres.map((genre) => (\r\n                <p style={{ margin: 0, marginRight: \"5px\" }} key={genre.name}>\r\n                  {genre.name}\r\n                </p>\r\n              ))}\r\n          </Typography>\r\n\r\n          <Typography className={classes.textStyle}>\r\n            Rating:{\" \"}\r\n            {movieDetails.vote_average\r\n              ? movieDetails.vote_average * 10 + \"%\"\r\n              : \"Not Yet Rated\"}\r\n          </Typography>\r\n\r\n          <Typography className={classes.textStyle}>\r\n            {movieDetails.runtime > 0 &&\r\n              Math.floor(movieDetails.runtime / 60) + \"h\"}{\" \"}\r\n            {movieDetails.runtime > 0 && (movieDetails.runtime % 60) + \"m\"}\r\n          </Typography>\r\n\r\n          {isMobile || (\r\n            <Box>\r\n              <Typography variant=\"h6\" className={classes.textStyle}>\r\n                Overview\r\n              </Typography>\r\n              <Typography className={classes.textStyle}>\r\n                {movieDetails.overview}\r\n              </Typography>\r\n            </Box>\r\n          )}\r\n\r\n          <div>\r\n            {director && (\r\n              <div className={classes.textStyle}>\r\n                <Typography variant=\"h6\">Director</Typography>\r\n                <Link\r\n                  to={`/person/${director.id}/`}\r\n                  style={{ textDecoration: \"none\", color: \"white\" }}\r\n                >\r\n                  <Typography className=\"linkStyle\">{director.name}</Typography>\r\n                </Link>\r\n              </div>\r\n            )}\r\n            {writer && (\r\n              <div className={classes.textStyle}>\r\n                <Typography variant=\"h6\">Writer</Typography>\r\n                <Link\r\n                  to={`/person/${writer.id}/`}\r\n                  style={{ textDecoration: \"none\", color: \"white\" }}\r\n                >\r\n                  <Typography className=\"linkStyle\">{writer.name}</Typography>\r\n                </Link>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TopMovie;\r\n","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\MovieDetails\\SideInfo.js",["184"],"import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { Typography, Button } from '@material-ui/core';\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport { useMediaQuery } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/styles';\r\nconst useStyles = makeStyles({\r\n  hideKeywords: {\r\n    display: 'none',\r\n  },\r\n});\r\nconst SideInfo = ({ movieId, movieDetails, mediaType }) => {\r\n  const classes = useStyles();\r\n\r\n  const [keywords, setKeywords] = useState(null);\r\n  const isMobile = useMediaQuery('(max-width: 600px)');\r\n  const [loaded, setLoaded] = useState(false);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const keywords = await axios.get(\r\n        `http://localhost:5000/details/${mediaType}/keywords`,\r\n        {\r\n          params: { id: movieId },\r\n        }\r\n      );\r\n      if (keywords.data.results) {\r\n        setKeywords(keywords.data.results);\r\n      } else {\r\n        setKeywords(keywords.data.keywords);\r\n      }\r\n\r\n      setLoaded(true);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n  return (\r\n    loaded && (\r\n      <div style={{ marginLeft: '30px' }}>\r\n        <Typography variant=\"h6\">Status</Typography>\r\n        {movieDetails.status !== '' ? (\r\n          <Typography>{movieDetails.status}</Typography>\r\n        ) : (\r\n          '-'\r\n        )}\r\n        <Typography variant=\"h6\">Original Language</Typography>\r\n        {movieDetails.original_language !== '' ? (\r\n          <Typography>{movieDetails.original_language}</Typography>\r\n        ) : (\r\n          '-'\r\n        )}\r\n        <Typography variant=\"h6\">Budget</Typography>\r\n        {movieDetails.budget ? (\r\n          movieDetails.budget > 1000 ? (\r\n            movieDetails.budget > 1000000 ? (\r\n              <Typography>{movieDetails.budget / 1000000} million</Typography>\r\n            ) : (\r\n              <Typography>{movieDetails.budget / 1000} thousand</Typography>\r\n            )\r\n          ) : (\r\n            <Typography>{movieDetails.budget}</Typography>\r\n          )\r\n        ) : (\r\n          '-'\r\n        )}\r\n        <Typography variant=\"h6\">Revenue</Typography>\r\n        {movieDetails.revenue ? (\r\n          movieDetails.revenue > 1000 ? (\r\n            movieDetails.revenue > 1000000 ? (\r\n              <Typography>\r\n                {Number(movieDetails.revenue / 1000000).toFixed(2)} million\r\n              </Typography>\r\n            ) : (\r\n              <Typography>\r\n                {Number(movieDetails.revenue / 1000).toFixed(2)} thousand\r\n              </Typography>\r\n            )\r\n          ) : (\r\n            <Typography>{Number(movieDetails.revenue).toFixed(2)} $</Typography>\r\n          )\r\n        ) : (\r\n          '-'\r\n        )}\r\n        <div className={isMobile && classes.hideKeywords}>\r\n          <Typography variant=\"h6\" style={{ margin: '10px 0 10px 0' }}>\r\n            Keywords\r\n          </Typography>\r\n          <div style={{ display: 'flex', flexWrap: 'wrap' }}>\r\n            {keywords ? (\r\n              keywords.map((keyword) => (\r\n                <Link\r\n                  key={keyword.id}\r\n                  to={{\r\n                    pathname: `/search/${keyword.name}`,\r\n                    state: keyword.name,\r\n                  }}\r\n                  style={{ textDecoration: 'none' }}\r\n                >\r\n                  <Button\r\n                    onClick={(e) => {\r\n                      localStorage.setItem('searchString', keyword.name);\r\n                    }}\r\n                    variant=\"outlined\"\r\n                    style={{ margin: '5px', padding: '4px' }}\r\n                  >\r\n                    {keyword.name}\r\n                  </Button>\r\n                </Link>\r\n              ))\r\n            ) : (\r\n              <Typography>No keywords have been added.</Typography>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  );\r\n};\r\n\r\nexport default SideInfo;\r\n","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\LandingPage\\MovieSlider.js",[],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\SearchPage\\SearchResultsSide.js",["185"],"import React, { useState, useEffect } from 'react';\r\nimport { Typography, Button, Paper, useMediaQuery } from '@material-ui/core';\r\n\r\nimport './style.scss';\r\n\r\nconst SearchResultsSide = ({\r\n  totalResultsTv,\r\n  totalResultsMovies,\r\n  totalResultsPeople,\r\n  setResultsType,\r\n  setCurrentPage,\r\n}) => {\r\n  const [categories, setCategories] = useState([]);\r\n  const isSmall = useMediaQuery('(max-width: 100px)');\r\n\r\n  useEffect(() => {\r\n    setCategories(\r\n      [\r\n        {\r\n          category: 'Movies',\r\n          totalResults: totalResultsMovies,\r\n        },\r\n        {\r\n          category: 'TV',\r\n          totalResults: totalResultsTv,\r\n        },\r\n        {\r\n          category: 'People',\r\n          totalResults: totalResultsPeople,\r\n        },\r\n      ].sort((a, b) => (a.totalResults < b.totalResults ? 1 : -1)),\r\n      () => {\r\n        setResultsType(categories[0].category);\r\n      }\r\n    );\r\n  }, [totalResultsTv, totalResultsMovies, totalResultsPeople]);\r\n\r\n  console.log('CATE', isSmall);\r\n  return (\r\n    <div className=\"yes\">\r\n      <Paper style={{ width: '250px' }} className=\"searchCategoriesContainer\">\r\n        <Typography\r\n          variant=\"h6\"\r\n          style={{\r\n            padding: '10px',\r\n            backgroundColor: '#01B4E4',\r\n            color: 'white',\r\n            borderRadius: '5px 5px 0 0',\r\n          }}\r\n        >\r\n          Search Categories\r\n        </Typography>\r\n        {categories.map((category) => (\r\n          <div\r\n            className=\"hoverStyle\"\r\n            style={{\r\n              display: 'flex',\r\n              justifyContent: 'space-between',\r\n              alignItems: 'center',\r\n              padding: '5px 10px 5px 10px',\r\n            }}\r\n          >\r\n            <Button\r\n              variant=\"text\"\r\n              onClick={() => {\r\n                setCurrentPage(1);\r\n                setResultsType(category.category);\r\n              }}\r\n            >\r\n              {category.category}\r\n            </Button>\r\n            <Typography\r\n              className=\"results\"\r\n              style={{ padding: '0 13px 0 13px', borderRadius: '15px' }}\r\n            >\r\n              {category.totalResults}\r\n            </Typography>\r\n          </div>\r\n        ))}\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchResultsSide;\r\n","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\LandingPage\\TrendingPeople.js",[],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\ActorPage\\ActorCredits.js",[],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\SearchPage\\PageNumNav.js",["186"],"import React from 'react';\r\nimport { Button, Typography } from '@material-ui/core';\r\n\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\n\r\nconst PageNumNav = ({ totalPages, currentPage, setCurrentPage }) => {\r\n  let totalPagesArray = Array.from(Array(totalPages), (_, x) => x);\r\n  return (\r\n    <div>\r\n      <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n        {totalPages ? (\r\n          <Button>\r\n            <FirstPageIcon onClick={() => setCurrentPage(1)} />\r\n          </Button>\r\n        ) : (\r\n          <Typography variant=\"h5\">No Results</Typography>\r\n        )}\r\n\r\n        {totalPagesArray.map((pageNum) => {\r\n          if (\r\n            pageNum + 1 >= totalPages - 7 &&\r\n            currentPage <= totalPages &&\r\n            currentPage >= totalPages - 4\r\n          ) {\r\n            if (pageNum + 1 === currentPage) {\r\n              return (\r\n                <Button\r\n                  style={{ backgroundColor: '#032541', color: 'white' }}\r\n                  onClick={() => setCurrentPage(pageNum + 1)}\r\n                >\r\n                  <Typography>{pageNum + 1}</Typography>\r\n                </Button>\r\n              );\r\n            } else {\r\n              return (\r\n                <Button onClick={() => setCurrentPage(pageNum + 1)}>\r\n                  <Typography variant=\"body2\">{pageNum + 1}</Typography>\r\n                </Button>\r\n              );\r\n            }\r\n          } else if (pageNum < 7 && currentPage < 7) {\r\n            console.log('FIRST CONDITION');\r\n            if (pageNum + 1 === currentPage) {\r\n              return (\r\n                <Button\r\n                  style={{ backgroundColor: '#032541', color: 'white' }}\r\n                  onClick={() => setCurrentPage(pageNum + 1)}\r\n                >\r\n                  <Typography>{pageNum + 1}</Typography>\r\n                </Button>\r\n              );\r\n            } else {\r\n              return (\r\n                <Button onClick={() => setCurrentPage(pageNum + 1)}>\r\n                  <Typography>{pageNum + 1}</Typography>\r\n                </Button>\r\n              );\r\n            }\r\n          } else if (\r\n            currentPage > pageNum - 3 &&\r\n            currentPage < pageNum + 5 &&\r\n            currentPage >= 7 &&\r\n            pageNum + 1 < totalPages - 1\r\n          ) {\r\n            console.log('SECOND CONDITION');\r\n            if (pageNum + 1 === currentPage) {\r\n              return (\r\n                <Button\r\n                  style={{ backgroundColor: '#032541', color: 'white' }}\r\n                  onClick={() => setCurrentPage(pageNum + 1)}\r\n                >\r\n                  <Typography>{pageNum + 1}</Typography>\r\n                </Button>\r\n              );\r\n            } else {\r\n              return (\r\n                <Button onClick={() => setCurrentPage(pageNum + 1)}>\r\n                  {pageNum + 1}\r\n                </Button>\r\n              );\r\n            }\r\n          }\r\n        })}\r\n        {totalPages ? (\r\n          <Button onClick={() => setCurrentPage(totalPages)}>\r\n            <LastPageIcon />\r\n          </Button>\r\n        ) : (\r\n          <div></div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PageNumNav;\r\n","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\Discover\\Searcher\\Searcher.js",["187","188","189"],"import React, { useState, useRef, useEffect } from \"react\";\r\n\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport GenreCheckboxes from \"./GenreCheckboxes\";\r\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport {\r\n  Button,\r\n  InputBase,\r\n  InputLabel,\r\n  NativeSelect,\r\n  FormLabel,\r\n} from \"@material-ui/core\";\r\nimport \"../style.scss\";\r\n\r\nconst CustomInput = withStyles((theme) => ({\r\n  root: {\r\n    \"label + &\": {\r\n      marginTop: theme.spacing(3),\r\n    },\r\n  },\r\n\r\n  input: {\r\n    padding: \"10px\",\r\n    borderRadius: 3,\r\n    position: \"relative\",\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"1px solid #ced4da\",\r\n    fontSize: 16,\r\n\r\n    // transition: theme.transitions.create([\"border-color\", \"box-shadow\"]),\r\n    // Use the system font instead of the default Roboto font.\r\n\r\n    \"&:focus\": {\r\n      borderRadius: 3,\r\n      borderColor: \"#80bdff\",\r\n      boxShadow: \"0 0 0 0.1rem rgba(0,0,0, 0.5)\",\r\n    },\r\n    \"&:hover\": {\r\n      borderRadius: 3,\r\n      borderColor: \"#80bdff\",\r\n      boxShadow: \"0 0 0 0.1rem rgba(0,0,0, 0.5)\",\r\n    },\r\n  },\r\n}))(InputBase);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  sortSelect: {},\r\n  searcherContainer: {\r\n    maxWidth: \"270px\",\r\n    [theme.breakpoints.down(\"760\")]: {\r\n      display: \"flex\",\r\n      justifyContent: \"center\",\r\n      maxWidth: \"100%\",\r\n    },\r\n  },\r\n  filterOptions: {\r\n    color: \"black\",\r\n    padding: \"3px\",\r\n    borderRadius: \"6px\",\r\n    boxShadow: \"1px 1px 5px #9fa1a6\",\r\n    marginTop: \"10px\",\r\n  },\r\n  optionsToggle: {\r\n    width: \"270px\",\r\n    justifyContent: \"flex-start\",\r\n  },\r\n  margin: {\r\n    marginTop: \"10px\",\r\n  },\r\n\r\n  form: {\r\n    width: \"250px\",\r\n    [theme.breakpoints.down(\"760\")]: {\r\n      width: \"100%\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Searcher = ({\r\n  setRuntime,\r\n  setScore,\r\n  score,\r\n  setSortOption,\r\n  runtime,\r\n  genres,\r\n  setReleaseDate,\r\n  submitHandle,\r\n  setLanguage,\r\n  mediaType,\r\n  setMediaType,\r\n  sortOption,\r\n  language,\r\n  releaseDate,\r\n  setGenres,\r\n}) => {\r\n  const releaseMarks = [\r\n    {\r\n      value: 1900,\r\n      label: \"1900\",\r\n    },\r\n    {\r\n      value: 2021,\r\n      label: \"2021\",\r\n    },\r\n  ];\r\n  const runtimeMarks = [\r\n    {\r\n      value: 0,\r\n      label: \"0\",\r\n    },\r\n    {\r\n      value: 120,\r\n      label: \"120\",\r\n    },\r\n    {\r\n      value: 240,\r\n      label: \"240\",\r\n    },\r\n    {\r\n      value: 360,\r\n      label: \"360\",\r\n    },\r\n  ];\r\n  const marks = [\r\n    {\r\n      value: 0,\r\n      label: \"0\",\r\n    },\r\n    {\r\n      value: 5,\r\n      label: \"|\",\r\n    },\r\n    {\r\n      value: 10,\r\n      label: \"10\",\r\n    },\r\n  ];\r\n\r\n  const sortSelect = useRef(null);\r\n  const [showSort, setShowSort] = useState(false);\r\n  const [showFilters, setShowFilters] = useState(false);\r\n  const date = new Date();\r\n\r\n  let yearRange = new Array();\r\n  for (\r\n    let i = 0, years = 1870;\r\n    years <= date.toISOString().slice(0, 4);\r\n    i++, years++\r\n  ) {\r\n    yearRange[i] = years;\r\n  }\r\n\r\n  const handleRuntime = (e, newValue) => {\r\n    setRuntime(newValue);\r\n  };\r\n  const handleScore = (e, newValue) => {\r\n    setScore(newValue);\r\n  };\r\n  const handleReleaseDate = (e, newValue) => {\r\n    setReleaseDate(newValue);\r\n  };\r\n\r\n  const classes = useStyles();\r\n  useEffect(() => {\r\n    setSortOption(sortSelect.current.childNodes[0].value);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.searcherContainer}>\r\n      <form\r\n        className={classes.form}\r\n        onSubmit={(e) => {\r\n          submitHandle();\r\n          e.preventDefault();\r\n        }}\r\n      >\r\n        <div className={classes.filterOptions}>\r\n          <Button\r\n            style={{\r\n              width: \"100%\",\r\n              justifyContent: \"space-between\",\r\n              color: \"black\",\r\n              fontWeight: 600,\r\n              fontSize: \"18px\",\r\n            }}\r\n            onClick={() => setShowSort(!showSort)}\r\n            className={classes.optionsToggle}\r\n            endIcon={showSort ? <ExpandLessIcon /> : <ExpandMoreIcon />}\r\n          >\r\n            Sort\r\n          </Button>\r\n          <div\r\n            style={{\r\n              display: showSort ? \"block\" : \"none\",\r\n              padding: \"5px 20px 20px 20px\",\r\n            }}\r\n          >\r\n            <FormControl fullWidth>\r\n              <InputLabel htmlFor=\"sortingOptions\" disableAnimation=\"true\">\r\n                Sorting Options\r\n              </InputLabel>\r\n              <NativeSelect\r\n                className={classes.sortSelect}\r\n                id=\"sortingOptions\"\r\n                input={<CustomInput />}\r\n                margin=\"dense\"\r\n                onChange={(e) => setSortOption(e.target.value)}\r\n                ref={sortSelect}\r\n                value={sortOption}\r\n              >\r\n                <option value=\"popularity.desc\">Popularity Descending</option>\r\n                <option value=\"popularity.asc\">Popularity Ascending</option>\r\n                <option value=\"vote_average.desc\">Rating Descending</option>\r\n                <option value=\"vote_average.asc\">Rating Ascending</option>\r\n                <option value=\"release_date.desc\">\r\n                  Release Date Descending\r\n                </option>\r\n                <option value=\"release_date.asc\">Release Date Ascending</option>\r\n                <option value=\"revenue.desc\">Revenue Descending</option>\r\n                <option value=\"revenue.asc\">Revenue Date Ascending</option>\r\n                <option value=\"original_title.desc\">\r\n                  Original Title Descending\r\n                </option>\r\n                <option value=\"original_title.asc\">\r\n                  Original Title Date Ascending\r\n                </option>\r\n\r\n                <option value=\"vote_count.desc\">Vote Count Descending</option>\r\n                <option value=\"vote_count.asc\">Vote Count Ascending</option>\r\n              </NativeSelect>\r\n            </FormControl>\r\n          </div>\r\n\r\n          {/* </select> */}\r\n        </div>\r\n        <div className={classes.filterOptions}>\r\n          <Button\r\n            style={{\r\n              width: \"100%\",\r\n              color: \"black\",\r\n              fontWeight: 600,\r\n              fontSize: \"18px\",\r\n              justifyContent: \"space-between\",\r\n            }}\r\n            endIcon={showFilters ? <ExpandLessIcon /> : <ExpandMoreIcon />}\r\n            onClick={() => setShowFilters(!showFilters)}\r\n            className={classes.optionsToggle}\r\n          >\r\n            Filters\r\n          </Button>\r\n          <div\r\n            style={{\r\n              display: showFilters ? \"flex\" : \"none\",\r\n              justifyContent: \"flex-start\",\r\n              flexDirection: \"column\",\r\n              padding: \"20px 30px 20px 20px\",\r\n            }}\r\n          >\r\n            <div style={{ display: showFilters ? \"block\" : \"none\" }}>\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-between\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                <Typography>Movies</Typography>\r\n\r\n                <FormControlLabel\r\n                  value=\"top\"\r\n                  control={\r\n                    <Switch\r\n                      checked={mediaType}\r\n                      onChange={() => {\r\n                        setMediaType(!mediaType);\r\n                        setGenres(\" \");\r\n                      }}\r\n                      color=\"primary\"\r\n                    />\r\n                  }\r\n                />\r\n                <Typography>Tv</Typography>\r\n              </div>\r\n              <GenreCheckboxes\r\n                genres={genres}\r\n                setGenres={setGenres}\r\n                movieOrTv={mediaType}\r\n              />\r\n              <FormLabel component=\"legend\">Genres</FormLabel>\r\n\r\n              <FormControl fullWidth>\r\n                <InputLabel\r\n                  htmlFor=\"languageOptions\"\r\n                  disableAnimation=\"true\"\r\n                  shrink={false}\r\n                >\r\n                  Language\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  className={classes.sortSelect}\r\n                  id=\"languageOptions\"\r\n                  input={<CustomInput />}\r\n                  onChange={(e) => setLanguage(e.target.value)}\r\n                  name=\"sort\"\r\n                  id=\"languageOptions\"\r\n                  value={language}\r\n                >\r\n                  <option value=\"en\">English</option>\r\n                  <option value=\"fr\">French</option>\r\n                  <option value=\"de\">German</option>\r\n                  <option value=\"es\">Spanish</option>\r\n                  <option value=\"ja\">Japanese</option>\r\n                  <option value=\"zh\">Chinese</option>\r\n                  <option value=\"hi\">Hindi</option>\r\n                  <option value=\"ar\">Arabic</option>\r\n                  <option value=\"bn\">Bengali</option>\r\n                  <option value=\"pt\">Portugese</option>\r\n                  <option value=\"ru\">Russion</option>\r\n                  <option value=\"sk\">Slovak</option>\r\n                </NativeSelect>\r\n              </FormControl>\r\n            </div>\r\n            <Typography className={classes.margin}>\r\n              Release Range (Years)\r\n            </Typography>\r\n            <Slider\r\n              value={releaseDate}\r\n              onChange={handleReleaseDate}\r\n              valueLabelDisplay=\"auto\"\r\n              min={1900}\r\n              max={2021}\r\n              marks={releaseMarks}\r\n              aria-labelledby=\"range-slider\"\r\n            />{\" \"}\r\n            <Typography className={classes.margin}>\r\n              Runtime (Minutes)\r\n            </Typography>\r\n            <Slider\r\n              value={runtime}\r\n              onChange={handleRuntime}\r\n              valueLabelDisplay=\"auto\"\r\n              min={0}\r\n              max={360}\r\n              marks={runtimeMarks}\r\n              aria-labelledby=\"range-slider\"\r\n            />\r\n            <Typography className={classes.margin}>\r\n              User Rating (0-10)\r\n            </Typography>\r\n            <Slider\r\n              className=\"slider\"\r\n              value={score}\r\n              onChange={handleScore}\r\n              valueLabelDisplay=\"auto\"\r\n              min={0}\r\n              max={10}\r\n              aria-labelledby=\"range-slider\"\r\n              marks={marks}\r\n            />\r\n          </div>\r\n        </div>\r\n        <Button\r\n          className={classes.margin}\r\n          variant=\"contained\"\r\n          type=\"submit\"\r\n          color=\"primary\"\r\n          fullWidth\r\n          style={{\r\n            fontWeight: 600,\r\n            fontSize: \"18px\",\r\n            display: \"block\",\r\n            borderRadius: \"15px\",\r\n            height: \"40px\",\r\n          }}\r\n        >\r\n          Search\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Searcher;\r\n","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\shared\\MovieDropLogged.js",["190"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport { Button, Box } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport axios from 'axios';\r\nimport StarIcon from '@material-ui/icons/Star';\r\n\r\nconst useStyles = makeStyles({\r\n  action: {\r\n    borderBottom: '1px solid black',\r\n    '&:hover': {\r\n      backgroundColor: '#CCCCCC',\r\n    },\r\n  },\r\n  starContainer: {\r\n    height: '35px',\r\n  },\r\n  star: {\r\n    fontSize: '32px',\r\n    '&:hover': {\r\n      cursor: 'pointer',\r\n      color: '#0BB5E0',\r\n\r\n      '&~svg': {\r\n        color: '#0BB5E0',\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nconst MovieDropLogged = ({ userId, movieId, mediaType }) => {\r\n  const firstRender = useRef(true);\r\n  const classes = useStyles();\r\n  const [score, setScore] = useState(0);\r\n  const [showRater, setShowRater] = useState(false);\r\n  const addFavourite = async () => {\r\n    await axios.get(\r\n      `${process.env.REACT_APP_SERVER_URL}/authentication/addFavourite`,\r\n      {\r\n        withCredentials: true,\r\n        params: {\r\n          user_id: userId,\r\n          media_id: movieId,\r\n          media_type: mediaType,\r\n        },\r\n      }\r\n    );\r\n  };\r\n  const addWatchlist = async () => {\r\n    await axios.get(\r\n      `${process.env.REACT_APP_SERVER_URL}/authentication/addWatchlist`,\r\n      {\r\n        withCredentials: true,\r\n        params: {\r\n          user_id: userId,\r\n          media_id: movieId,\r\n          media_type: mediaType,\r\n        },\r\n      }\r\n    );\r\n  };\r\n  const addRating = async () => {\r\n    await axios.get(\r\n      `${process.env.REACT_APP_SERVER_URL}/authentication/addRating`,\r\n      {\r\n        withCredentials: true,\r\n        params: {\r\n          score: score,\r\n          media_id: movieId,\r\n        },\r\n      }\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (firstRender.current) {\r\n      firstRender.current = false;\r\n    } else {\r\n      addRating();\r\n    }\r\n  }, [score]);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        backgroundColor: 'white',\r\n        position: 'absolute',\r\n        top: '33px',\r\n        left: '50px',\r\n        width: '175px',\r\n        zIndex: '20',\r\n        borderRadius: '5px',\r\n        boxShadow: '1px 1px 5px gray',\r\n      }}\r\n    >\r\n      <Box className={classes.action}>\r\n        <Button onClick={() => addWatchlist()}>Add to Watchlist</Button>\r\n      </Box>\r\n      <Box className={classes.action}>\r\n        <Button onClick={() => addFavourite()}>Add to Favorite </Button>\r\n      </Box>\r\n      <Box className={classes.action}>\r\n        <Button onClick={() => setShowRater(!showRater)}>Rate</Button>\r\n      </Box>\r\n\r\n      {showRater && (\r\n        <Box\r\n          style={{\r\n            display: 'flex',\r\n            flexDirection: 'row-reverse',\r\n            justifyContent: 'center',\r\n          }}\r\n          className={classes.starContainer}\r\n        >\r\n          <StarIcon\r\n            className={classes.star}\r\n            onClick={() => {\r\n              setScore(2);\r\n            }}\r\n          />\r\n          <StarIcon className={classes.star} onClick={() => setScore(4)} />\r\n          <StarIcon className={classes.star} onClick={() => setScore(6)} />\r\n          <StarIcon className={classes.star} onClick={() => setScore(8)} />\r\n          <StarIcon className={classes.star} onClick={() => setScore(10)} />\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MovieDropLogged;\r\n","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\MovieDetails\\MediaActions.js",["191","192"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport { useUserId } from '../../contexts/SignedContext';\r\nimport { IconButton, Box, Typography } from '@material-ui/core';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport WatchLaterIcon from '@material-ui/icons/WatchLater';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\r\nimport axios from 'axios';\r\nimport { useSigned } from '../../contexts/SignedContext';\r\nconst useStyles = makeStyles({\r\n  action: {\r\n    borderBottom: '1px solid black',\r\n    '&:hover': {\r\n      backgroundColor: '#CCCCCC',\r\n    },\r\n  },\r\n  starContainer: {\r\n    height: '35px',\r\n    position: 'absolute',\r\n    top: '80px',\r\n    left: '60px',\r\n    backgroundColor: 'black',\r\n  },\r\n  star: {\r\n    fontSize: '32px',\r\n    '&:hover': {\r\n      cursor: 'pointer',\r\n      color: '#0BB5E0',\r\n\r\n      '&~svg': {\r\n        color: '#0BB5E0',\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nconst MediaActions = ({ movieId, mediaType }) => {\r\n  const firstRender = useRef(true);\r\n  const signed = useSigned();\r\n  const [score, setScore] = useState(0);\r\n  const userId = useUserId();\r\n  const [accountStates, setAccountStates] = useState({});\r\n  const addFavourite = async () => {\r\n    await axios.get(\r\n      `${process.env.REACT_APP_SERVER_URL}/authentication/addFavourite`,\r\n      {\r\n        withCredentials: true,\r\n        params: {\r\n          user_id: userId,\r\n          media_id: movieId,\r\n          media_type: mediaType,\r\n        },\r\n      }\r\n    );\r\n  };\r\n  const addWatchlist = async () => {\r\n    await axios.get(\r\n      `${process.env.REACT_APP_SERVER_URL}/authentication/addWatchlist`,\r\n      {\r\n        withCredentials: true,\r\n        params: {\r\n          user_id: userId,\r\n          media_id: movieId,\r\n          media_type: mediaType,\r\n        },\r\n      }\r\n    );\r\n  };\r\n  const addRating = async () => {\r\n    await axios.get(\r\n      `${process.env.REACT_APP_SERVER_URL}/authentication/addRating`,\r\n      {\r\n        withCredentials: true,\r\n        params: {\r\n          score: score,\r\n          media_id: movieId,\r\n        },\r\n      }\r\n    );\r\n  };\r\n  const getAccountStates = async () => {\r\n    try {\r\n      if (signed) {\r\n        const accountStates = await axios.get(\r\n          `${process.env.REACT_APP_SERVER_URL}/authentication/${mediaType}/getAccountStates`,\r\n          {\r\n            withCredentials: true,\r\n            params: {\r\n              media_id: movieId,\r\n            },\r\n          }\r\n        );\r\n        console.log(accountStates.data);\r\n        setAccountStates(accountStates.data);\r\n      } else {\r\n        setAccountStates({});\r\n      }\r\n    } catch (err) {\r\n      console.log(err.message);\r\n    }\r\n  };\r\n  const classes = useStyles();\r\n  const [showRater, setShowRater] = useState(false);\r\n\r\n  useEffect(() => {\r\n    getAccountStates();\r\n  }, [signed]);\r\n  useEffect(() => {\r\n    if (firstRender.current) {\r\n      firstRender.current = false;\r\n    } else {\r\n      addRating();\r\n    }\r\n  }, [score]);\r\n  console.log(accountStates);\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n        backgroundColor: 'rgba(255,255,255,0.7)',\r\n        width: 'fit-content',\r\n        borderRadius: '7px',\r\n        marginLeft: '10px',\r\n      }}\r\n    >\r\n      <IconButton\r\n        children={\r\n          accountStates.watchlist ? (\r\n            <WatchLaterIcon style={{ color: '#EEC407' }} />\r\n          ) : (\r\n            <WatchLaterIcon color=\"red\" />\r\n          )\r\n        }\r\n        onClick={() => addWatchlist()}\r\n      />\r\n      <IconButton\r\n        onClick={() => {\r\n          addFavourite();\r\n        }}\r\n        children={\r\n          accountStates.favorite ? (\r\n            <FavoriteIcon style={{ color: 'red' }} />\r\n          ) : (\r\n            <FavoriteBorderIcon />\r\n          )\r\n        }\r\n      />\r\n      <IconButton\r\n        onClick={() => setShowRater(!showRater)}\r\n        children={\r\n          accountStates.rated ? (\r\n            <StarIcon style={{ color: '#EF47B6' }} />\r\n          ) : (\r\n            <StarBorderIcon />\r\n          )\r\n        }\r\n      />\r\n\r\n      {accountStates.rated && (\r\n        <Typography\r\n          style={{\r\n            color: 'black',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            paddingRight: '10px',\r\n          }}\r\n        >\r\n          Your rating is {accountStates.rated.value}/10\r\n        </Typography>\r\n      )}\r\n\r\n      {showRater && (\r\n        <Box\r\n          style={{\r\n            display: 'flex',\r\n            flexDirection: 'row-reverse',\r\n            justifyContent: 'center',\r\n          }}\r\n          className={classes.starContainer}\r\n        >\r\n          <StarIcon\r\n            className={classes.star}\r\n            onClick={() => {\r\n              setScore(2);\r\n            }}\r\n          />\r\n          <StarIcon className={classes.star} onClick={() => setScore(4)} />\r\n          <StarIcon className={classes.star} onClick={() => setScore(6)} />\r\n          <StarIcon className={classes.star} onClick={() => setScore(8)} />\r\n          <StarIcon className={classes.star} onClick={() => setScore(10)} />\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default MediaActions;\r\n","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\ActorPage\\ActorCreditCategory.js",[],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\Discover\\Searcher\\GenreCheckboxes.js",["193"],"import React, { useEffect } from \"react\";\r\nimport { FormControlLabel, FormGroup, Checkbox } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n  margin: {\r\n    margin: 0,\r\n  },\r\n});\r\n\r\nconst GenreCheckboxes = ({ setGenres, genres, movieOrTv }) => {\r\n  const genreCheckboxHandle = (e) => {\r\n    if (e.target.checked) {\r\n      console.log(genres + \",\" + e.target.value);\r\n      setGenres(genres + \",\" + e.target.value);\r\n      console.log(genres);\r\n    } else {\r\n      console.log(\"HEHEEH\", genres);\r\n      setGenres(genres.replace(\",\" + e.target.value, \"\"));\r\n    }\r\n  };\r\n  const classes = useStyles();\r\n  console.log(Array.from(document.getElementsByClassName(\"checkbox\"))[0]);\r\n  console.log(\"MEDIA TYPE\", movieOrTv);\r\n  return (\r\n    <div>\r\n      {movieOrTv ? (\r\n        <FormGroup aria-label=\"position\" row>\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"10762\"\r\n            control={<Checkbox color=\"primary\" className=\"checkbox\" />}\r\n            label=\"Kids\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"16\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Animation\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"10759\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Action & Adventure\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"10768\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"War & Politics\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"10767\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Talk\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"99\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Documentary\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"80\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Crime\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"10763\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"News\"\r\n            labelPlacement=\"start\"\r\n          />\r\n\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"35\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Comedy\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"18\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Drama\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"10765\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Sci-Fi & Fantasy\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"9648\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Mystery\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"10766\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Soap\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"53\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Thriller\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"37\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Western\"\r\n            labelPlacement=\"start\"\r\n          />\r\n        </FormGroup>\r\n      ) : (\r\n        <FormGroup aria-label=\"position\" row>\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"27\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Horror\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"12\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Adventure\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"28\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Action\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"878\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Sci-fi\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"99\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Documentary\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"80\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Crime\"\r\n            labelPlacement=\"start\"\r\n          />\r\n\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"16\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Animation\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"35\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Comedy\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"18\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Drama\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"14\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Fantasy\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"9648\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Mystery\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"10749\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Romance\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"53\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Thriller\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"37\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Western\"\r\n            labelPlacement=\"start\"\r\n          />\r\n        </FormGroup>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default GenreCheckboxes;\r\n","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\shared\\MovieDropLoggedOut.js",[],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\LandingPage\\RatingWheel.js",["194"],"import React, { useRef, useEffect } from \"react\";\r\n\r\nexport const RatingWheel = ({ rating, discover }) => {\r\n  const canvasRef = useRef(null);\r\n  const radius = (2 / 100) * rating;\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n\r\n    ctx.beginPath();\r\n    ctx.lineWidth = 6;\r\n\r\n    //Rating wheel border dependent on rating\r\n    if (radius) {\r\n      if (rating < 55) {\r\n        ctx.strokeStyle = \"orange\";\r\n      } else if (rating <= 30) {\r\n        ctx.strokeStyle = \"gray\";\r\n      } else {\r\n        ctx.strokeStyle = \"green\";\r\n      }\r\n\r\n      ctx.arc(22, 22, 18, 0, radius * Math.PI);\r\n      ctx.stroke();\r\n    } else {\r\n      ctx.strokeStyle = \"red\";\r\n      ctx.arc(22, 22, 18, 0, 2 * Math.PI);\r\n      ctx.stroke();\r\n    }\r\n    //Black middle of the rating wheel\r\n    ctx.beginPath();\r\n    ctx.arc(22, 22, 17, 0, 2 * Math.PI);\r\n    ctx.fill();\r\n\r\n    ctx.beginPath();\r\n    ctx.fillStyle = \"white\";\r\n    if (rating === 100) {\r\n      ctx.font = \"700 13px Roboto\";\r\n      ctx.fillText(`${rating}%`, 6, 26, 36);\r\n    } else if (rating) {\r\n      ctx.font = \"700 14px Roboto\";\r\n      ctx.fillText(`${rating}%`, 9, 27, 36);\r\n    } else {\r\n      ctx.font = \"700 14px Roboto\";\r\n      ctx.fillText(`NR`, 12, 27, 36);\r\n    }\r\n  }, []);\r\n\r\n  // var myFont = new FontFace(\r\n  //   \"My Font\",\r\n  //   \"url(https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap)\"\r\n  // );\r\n  // let fontLoaded = false;\r\n  // myFont.load().then(function (font) {\r\n  //   // with canvas, if this is ommited won't work\r\n  //   document.fonts.add(font);\r\n  //   fontLoaded = true;\r\n  //   console.log(\"Font loaded\");\r\n  // });\r\n\r\n  return (\r\n    <div style={{ fontFamily: \"Roboto\" }}>\r\n      {discover ? (\r\n        <canvas\r\n          width=\"44px\"\r\n          height=\"44px\"\r\n          ref={canvasRef}\r\n          {...rating}\r\n          style={{\r\n            borderColor: \"blue\",\r\n            position: \"absolute\",\r\n            top: \"3px\",\r\n            right: \"152px\",\r\n          }}\r\n        ></canvas>\r\n      ) : (\r\n        <canvas\r\n          width=\"44px\"\r\n          height=\"44px\"\r\n          ref={canvasRef}\r\n          {...rating}\r\n          style={{\r\n            fontFamily: \"Roboto\",\r\n            borderColor: \"blue\",\r\n            position: \"absolute\",\r\n            top: \"1px\",\r\n            right: \"108px\",\r\n          }}\r\n        ></canvas>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default RatingWheel;\r\n",{"ruleId":"195","replacedBy":"196"},{"ruleId":"197","replacedBy":"198"},{"ruleId":"199","severity":1,"message":"200","line":31,"column":6,"nodeType":"201","endLine":31,"endColumn":8,"suggestions":"202"},{"ruleId":"203","severity":1,"message":"204","line":153,"column":24,"nodeType":"205","messageId":"206","endLine":153,"endColumn":39},{"ruleId":"203","severity":1,"message":"207","line":161,"column":10,"nodeType":"205","messageId":"206","endLine":161,"endColumn":16},{"ruleId":"203","severity":1,"message":"208","line":161,"column":18,"nodeType":"205","messageId":"206","endLine":161,"endColumn":27},{"ruleId":"199","severity":1,"message":"209","line":224,"column":6,"nodeType":"201","endLine":224,"endColumn":8,"suggestions":"210"},{"ruleId":"199","severity":1,"message":"211","line":167,"column":6,"nodeType":"201","endLine":167,"endColumn":19,"suggestions":"212"},{"ruleId":"213","severity":1,"message":"214","line":122,"column":28,"nodeType":"215","messageId":"216","endLine":122,"endColumn":63},{"ruleId":"199","severity":1,"message":"217","line":150,"column":6,"nodeType":"201","endLine":150,"endColumn":8,"suggestions":"218"},{"ruleId":"199","severity":1,"message":"219","line":141,"column":6,"nodeType":"201","endLine":141,"endColumn":8,"suggestions":"220"},{"ruleId":"199","severity":1,"message":"221","line":81,"column":6,"nodeType":"201","endLine":81,"endColumn":22,"suggestions":"222"},{"ruleId":"199","severity":1,"message":"223","line":91,"column":6,"nodeType":"201","endLine":91,"endColumn":19,"suggestions":"224"},{"ruleId":"225","severity":1,"message":"226","line":16,"column":22,"nodeType":"227","messageId":"228","endLine":16,"endColumn":24},{"ruleId":"203","severity":1,"message":"229","line":37,"column":5,"nodeType":"205","messageId":"206","endLine":37,"endColumn":17},{"ruleId":"203","severity":1,"message":"230","line":10,"column":8,"nodeType":"205","messageId":"206","endLine":10,"endColumn":20},{"ruleId":"199","severity":1,"message":"231","line":42,"column":6,"nodeType":"201","endLine":42,"endColumn":8,"suggestions":"232"},{"ruleId":"199","severity":1,"message":"233","line":36,"column":6,"nodeType":"201","endLine":36,"endColumn":62,"suggestions":"234"},{"ruleId":"225","severity":1,"message":"235","line":20,"column":40,"nodeType":"227","messageId":"236","endLine":20,"endColumn":42},{"ruleId":"237","severity":1,"message":"238","line":151,"column":19,"nodeType":"239","messageId":"240","endLine":151,"endColumn":30},{"ruleId":"199","severity":1,"message":"241","line":173,"column":6,"nodeType":"201","endLine":173,"endColumn":8,"suggestions":"242"},{"ruleId":"243","severity":1,"message":"244","line":312,"column":19,"nodeType":"245","messageId":"246","endLine":312,"endColumn":39},{"ruleId":"199","severity":1,"message":"247","line":80,"column":6,"nodeType":"201","endLine":80,"endColumn":13,"suggestions":"248"},{"ruleId":"199","severity":1,"message":"249","line":109,"column":6,"nodeType":"201","endLine":109,"endColumn":14,"suggestions":"250"},{"ruleId":"199","severity":1,"message":"247","line":116,"column":6,"nodeType":"201","endLine":116,"endColumn":13,"suggestions":"251"},{"ruleId":"203","severity":1,"message":"252","line":1,"column":17,"nodeType":"205","messageId":"206","endLine":1,"endColumn":26},{"ruleId":"199","severity":1,"message":"253","line":48,"column":6,"nodeType":"201","endLine":48,"endColumn":8,"suggestions":"254"},"no-native-reassign",["255"],"no-negated-in-lhs",["256"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'createSessionId'. Either include it or remove the dependency array.","ArrayExpression",["257"],"no-unused-vars","'setShowUserMenu' is assigned a value but never used.","Identifier","unusedVar","'logged' is assigned a value but never used.","'setLogged' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'checkSigned'. Either include it or remove the dependency array.",["258"],"React Hook useEffect has a missing dependency: 'submitHandle'. Either include it or remove the dependency array.",["259"],"no-self-compare","Comparing to itself is potentially pointless.","BinaryExpression","comparingToSelf","React Hook useEffect has a missing dependency: 'fetchMovie'. Either include it or remove the dependency array.",["260"],"React Hook useEffect has missing dependencies: 'fetchActorDetails' and 'fetchAllCredits'. Either include them or remove the dependency array.",["261"],"React Hook useEffect has missing dependencies: 'fetchMovies', 'fetchPeople', and 'fetchTv'. Either include them or remove the dependency array.",["262"],"React Hook useEffect has missing dependencies: 'fetchMovies', 'fetchPeople', 'fetchTv', and 'resultsType'. Either include them or remove the dependency array.",["263"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'borderRadius' is assigned a value but never used.","'MediaActions' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["264"],"React Hook useEffect has missing dependencies: 'categories' and 'setResultsType'. Either include them or remove the dependency array. If 'setResultsType' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["265"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","React Hook useEffect has a missing dependency: 'setSortOption'. Either include it or remove the dependency array. If 'setSortOption' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["266"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","React Hook useEffect has a missing dependency: 'addRating'. Either include it or remove the dependency array.",["267"],"React Hook useEffect has a missing dependency: 'getAccountStates'. Either include it or remove the dependency array.",["268"],["269"],"'useEffect' is defined but never used.","React Hook useEffect has missing dependencies: 'radius' and 'rating'. Either include them or remove the dependency array.",["270"],"no-global-assign","no-unsafe-negation",{"desc":"271","fix":"272"},{"desc":"273","fix":"274"},{"desc":"275","fix":"276"},{"desc":"277","fix":"278"},{"desc":"279","fix":"280"},{"desc":"281","fix":"282"},{"desc":"283","fix":"284"},{"desc":"285","fix":"286"},{"desc":"287","fix":"288"},{"desc":"289","fix":"290"},{"desc":"291","fix":"292"},{"desc":"293","fix":"294"},{"desc":"291","fix":"295"},{"desc":"296","fix":"297"},"Update the dependencies array to be: [createSessionId]",{"range":"298","text":"299"},"Update the dependencies array to be: [checkSigned]",{"range":"300","text":"301"},"Update the dependencies array to be: [loadContent, submitHandle]",{"range":"302","text":"303"},"Update the dependencies array to be: [fetchMovie]",{"range":"304","text":"305"},"Update the dependencies array to be: [fetchActorDetails, fetchAllCredits]",{"range":"306","text":"307"},"Update the dependencies array to be: [fetchMovies, fetchPeople, fetchTv, location.state]",{"range":"308","text":"309"},"Update the dependencies array to be: [currentPage, fetchMovies, fetchPeople, fetchTv, resultsType]",{"range":"310","text":"311"},"Update the dependencies array to be: [fetchData]",{"range":"312","text":"313"},"Update the dependencies array to be: [totalResultsTv, totalResultsMovies, totalResultsPeople, setResultsType, categories]",{"range":"314","text":"315"},"Update the dependencies array to be: [setSortOption]",{"range":"316","text":"317"},"Update the dependencies array to be: [addRating, score]",{"range":"318","text":"319"},"Update the dependencies array to be: [getAccountStates, signed]",{"range":"320","text":"321"},{"range":"322","text":"319"},"Update the dependencies array to be: [radius, rating]",{"range":"323","text":"324"},[983,985],"[createSessionId]",[5391,5393],"[checkSigned]",[5181,5194],"[loadContent, submitHandle]",[4135,4137],"[fetchMovie]",[4241,4243],"[fetchActorDetails, fetchAllCredits]",[2826,2842],"[fetchMovies, fetchPeople, fetchTv, location.state]",[3064,3077],"[currentPage, fetchMovies, fetchPeople, fetchTv, resultsType]",[1125,1127],"[fetchData]",[907,963],"[totalResultsTv, totalResultsMovies, totalResultsPeople, setResultsType, categories]",[3654,3656],"[setSortOption]",[1902,1909],"[addRating, score]",[2979,2987],"[getAccountStates, signed]",[3126,3133],[1281,1283],"[radius, rating]"]