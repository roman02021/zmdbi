[{"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\index.js":"1","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\reportWebVitals.js":"2","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\App.js":"3","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\theme.js":"4","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\LoginApproved.js":"5","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\contexts\\SessionContext.js":"6","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\contexts\\DiscoverContext.js":"7","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\contexts\\SignedContext.js":"8","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\shared\\NavBar.js":"9","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\Discover\\DiscoverPage.js":"10","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\Credits\\Credits.js":"11","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\shared\\Footer.js":"12","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\MovieDetails\\MoviePage.js":"13","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\LandingPage\\LandingPage.js":"14","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\ActorPage\\ActorPage.js":"15","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\SearchPage\\SearchResults.js":"16","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\shared\\HamburgerMenu.js":"17","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\shared\\kategorieTeilung.js":"18","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\MovieDetails\\Review.js":"19","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\shared\\MovieCard.js":"20","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\Credits\\CreditsPerson.js":"21","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\MovieDetails\\TopBilledCast.js":"22","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\Discover\\MovieCardPhone.js":"23","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\MovieDetails\\TopMovie.js":"24","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\MovieDetails\\SideInfo.js":"25","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\LandingPage\\MovieSlider.js":"26","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\SearchPage\\SearchResultsSide.js":"27","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\LandingPage\\TrendingPeople.js":"28","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\ActorPage\\ActorCredits.js":"29","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\SearchPage\\PageNumNav.js":"30","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\Discover\\Searcher\\Searcher.js":"31","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\shared\\MovieDropLogged.js":"32","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\MovieDetails\\MediaActions.js":"33","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\ActorPage\\ActorCreditCategory.js":"34","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\Discover\\Searcher\\GenreCheckboxes.js":"35","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\shared\\MovieDropLoggedOut.js":"36","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\LandingPage\\RatingWheel.js":"37"},{"size":302,"mtime":1669923044018,"results":"38","hashOfConfig":"39"},{"size":375,"mtime":1669923044018,"results":"40","hashOfConfig":"39"},{"size":2370,"mtime":1669923043981,"results":"41","hashOfConfig":"39"},{"size":3322,"mtime":1669923044019,"results":"42","hashOfConfig":"39"},{"size":1700,"mtime":1669930037078,"results":"43","hashOfConfig":"39"},{"size":688,"mtime":1669923044005,"results":"44","hashOfConfig":"39"},{"size":734,"mtime":1669923044005,"results":"45","hashOfConfig":"39"},{"size":1681,"mtime":1669923044006,"results":"46","hashOfConfig":"39"},{"size":16513,"mtime":1669931254680,"results":"47","hashOfConfig":"39"},{"size":9402,"mtime":1669931297303,"results":"48","hashOfConfig":"39"},{"size":3611,"mtime":1669923043985,"results":"49","hashOfConfig":"39"},{"size":1890,"mtime":1669923043999,"results":"50","hashOfConfig":"39"},{"size":7370,"mtime":1669931135427,"results":"51","hashOfConfig":"39"},{"size":5141,"mtime":1669931022775,"results":"52","hashOfConfig":"39"},{"size":11557,"mtime":1669931324037,"results":"53","hashOfConfig":"39"},{"size":11010,"mtime":1669929597338,"results":"54","hashOfConfig":"39"},{"size":8503,"mtime":1669923044000,"results":"55","hashOfConfig":"39"},{"size":1320,"mtime":1669923044003,"results":"56","hashOfConfig":"39"},{"size":3090,"mtime":1669923043993,"results":"57","hashOfConfig":"39"},{"size":4390,"mtime":1669929370865,"results":"58","hashOfConfig":"39"},{"size":1790,"mtime":1669923043985,"results":"59","hashOfConfig":"39"},{"size":3960,"mtime":1669923043994,"results":"60","hashOfConfig":"39"},{"size":1996,"mtime":1669923043987,"results":"61","hashOfConfig":"39"},{"size":5673,"mtime":1669923043995,"results":"62","hashOfConfig":"39"},{"size":3949,"mtime":1669927684912,"results":"63","hashOfConfig":"39"},{"size":772,"mtime":1669929281280,"results":"64","hashOfConfig":"39"},{"size":2294,"mtime":1669929592250,"results":"65","hashOfConfig":"39"},{"size":4804,"mtime":1669931041316,"results":"66","hashOfConfig":"39"},{"size":1833,"mtime":1669923043983,"results":"67","hashOfConfig":"39"},{"size":3248,"mtime":1669929607439,"results":"68","hashOfConfig":"39"},{"size":11174,"mtime":1669923043988,"results":"69","hashOfConfig":"39"},{"size":3361,"mtime":1669931203467,"results":"70","hashOfConfig":"39"},{"size":5305,"mtime":1669931085580,"results":"71","hashOfConfig":"39"},{"size":3021,"mtime":1669923043983,"results":"72","hashOfConfig":"39"},{"size":9177,"mtime":1669923043987,"results":"73","hashOfConfig":"39"},{"size":1591,"mtime":1669931217628,"results":"74","hashOfConfig":"39"},{"size":2449,"mtime":1669923043991,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"1gpjj7v",{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"78"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"78"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"78"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"78"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"78"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"78"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"78"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"78"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"78"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"78"},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"78"},"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\index.js",[],["162","163"],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\reportWebVitals.js",[],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\App.js",[],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\theme.js",[],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\LoginApproved.js",["164"],"import React, { useEffect, useState } from 'react';\r\nimport { useSignedUpdate } from './contexts/SignedContext';\r\nimport axios from 'axios';\r\nimport { useLocation, useHistory } from 'react-router-dom';\r\n\r\nimport { Button, Typography, Container } from '@material-ui/core';\r\nconst LoginApproved = () => {\r\n  const setSigned = useSignedUpdate();\r\n  const history = useHistory();\r\n\r\n  const [loginSucess, setLoginSucess] = useState(false);\r\n  console.log(history);\r\n  const location = useLocation();\r\n  const token = new URLSearchParams(location.search).get('request_token');\r\n  console.log('token', token);\r\n  const createSessionId = async () => {\r\n    try {\r\n      axios.get(`${process.env.SERVER_URL}/authentication/getSessionId`, {\r\n        params: { token: token },\r\n        withCredentials: true,\r\n      });\r\n      setSigned(true);\r\n      setLoginSucess(true);\r\n    } catch (err) {\r\n      console.log(err.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    createSessionId();\r\n  }, []);\r\n\r\n  return (\r\n    <Container\r\n      style={{\r\n        height: '60vh',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n      }}\r\n    >\r\n      {loginSucess ? (\r\n        <Typography variant=\"h3\">Login Successful </Typography>\r\n      ) : (\r\n        <Typography variant=\"h3\">Login Failed</Typography>\r\n      )}\r\n\r\n      <Button\r\n        style={{ marginTop: '20px', fontSize: '30px' }}\r\n        variant=\"text\"\r\n        onClick={() =>\r\n          (window.location = 'https://nameless-shore-33653.herokuapp.com/')\r\n        }\r\n      >\r\n        GO BACK TO MAIN PAGE\r\n      </Button>\r\n    </Container>\r\n  );\r\n};\r\nexport default LoginApproved;\r\n","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\contexts\\SessionContext.js",[],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\contexts\\DiscoverContext.js",[],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\contexts\\SignedContext.js",[],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\shared\\NavBar.js",["165","166","167","168"],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\Discover\\DiscoverPage.js",["169"],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\Credits\\Credits.js",[],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\shared\\Footer.js",[],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\MovieDetails\\MoviePage.js",["170","171"],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\LandingPage\\LandingPage.js",[],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\ActorPage\\ActorPage.js",["172"],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\SearchPage\\SearchResults.js",["173","174"],"import React, { useEffect, useState } from 'react';\r\nimport { useHistory, useLocation, Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nimport SearchResultsSide from './SearchResultsSide';\r\nimport PageNumNav from './PageNumNav';\r\nimport { Container, Grid, Typography, Paper } from '@material-ui/core';\r\nimport '../../index.css';\r\nimport profilePicHolder from '../../images/profile_pic_holder_w92.png';\r\nimport posterHolder from '../../images/no_image_holder_w92.png';\r\n\r\nconst SearchResults = () => {\r\n  const history = useHistory();\r\n\r\n  const location = useLocation();\r\n  const [searchedMovies, setSearchedMovies] = useState(null);\r\n  const [searchedTv, setSearchedTv] = useState(null);\r\n  const [searchedPeople, setSearchedPeople] = useState(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [resultsType, setResultsType] = useState('Movies');\r\n\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  const [totalResultsMovies, setTotalResultsMovies] = useState(0);\r\n  const [totalPagesMovies, setTotalPagesMovies] = useState(0);\r\n  const [totalResultsTv, setTotalResultsTv] = useState(0);\r\n  const [totalPagesTv, setTotalPagesTv] = useState(0);\r\n  const [totalResultsPeople, setTotalResultsPeople] = useState(0);\r\n  const [totalPagesPeople, setTotalPagesPeople] = useState(0);\r\n\r\n  const fetchMovies = async () => {\r\n    const searchedMovies = await axios.get(\r\n      'http://localhost:5000/search/movie',\r\n      {\r\n        params: {\r\n          searchQuery: history.location.state,\r\n          page: currentPage,\r\n        },\r\n      }\r\n    );\r\n    setSearchedMovies(searchedMovies.data.results);\r\n    setTotalResultsMovies(searchedMovies.data.total_results);\r\n    setTotalPagesMovies(searchedMovies.data.total_pages);\r\n  };\r\n  const fetchTv = async () => {\r\n    const searchedTv = await axios.get('http://localhost:5000/search/tv', {\r\n      params: {\r\n        searchQuery: history.location.state,\r\n        page: currentPage,\r\n      },\r\n    });\r\n    setSearchedTv(searchedTv.data.results);\r\n    setTotalResultsTv(searchedTv.data.total_results);\r\n    setTotalPagesTv(searchedTv.data.total_pages);\r\n  };\r\n  const fetchPeople = async () => {\r\n    const searchedPeople = await axios.get(\r\n      'http://localhost:5000/search/people',\r\n      {\r\n        params: {\r\n          searchQuery: history.location.state,\r\n          page: currentPage,\r\n        },\r\n      }\r\n    );\r\n    console.log('TV', searchedPeople);\r\n    setSearchedPeople(searchedPeople.data.results);\r\n    setTotalResultsPeople(searchedPeople.data.total_results);\r\n    setTotalPagesPeople(searchedPeople.data.total_pages);\r\n  };\r\n\r\n  console.log(searchedMovies);\r\n  console.log(searchedTv);\r\n  console.log(searchedPeople);\r\n\r\n  useEffect(() => {\r\n    fetchMovies();\r\n    fetchTv();\r\n    fetchPeople();\r\n    setIsLoaded(true);\r\n  }, [location.state]);\r\n\r\n  useEffect(() => {\r\n    if (resultsType === 'Movies') {\r\n      fetchMovies();\r\n    } else if (resultsType === 'TV') {\r\n      fetchTv();\r\n    } else if (resultsType === 'People') {\r\n      fetchPeople();\r\n    }\r\n  }, [currentPage]);\r\n\r\n  return (\r\n    <Container style={{ marginTop: '30px', minHeight: '60vh' }}>\r\n      {isLoaded ? (\r\n        <Grid container style={{ justifyContent: 'flex-end' }}>\r\n          <Grid xs={12} sm={5} md={4} lg={3}>\r\n            <SearchResultsSide\r\n              totalResultsMovies={totalResultsMovies}\r\n              totalResultsPeople={totalResultsPeople}\r\n              totalResultsTv={totalResultsTv}\r\n              setResultsType={setResultsType}\r\n              setCurrentPage={setCurrentPage}\r\n            />\r\n          </Grid>\r\n          <Grid xs={12} sm={7} md={8} lg={9}>\r\n            {resultsType === 'Movies' && (\r\n              <div>\r\n                {console.log('SEARVHD MOIS', searchedMovies)}\r\n                {searchedMovies &&\r\n                  searchedMovies.map((movie) => (\r\n                    <Paper\r\n                      key={movie.id}\r\n                      style={{\r\n                        display: 'flex',\r\n                        marginBottom: '15px',\r\n                      }}\r\n                    >\r\n                      {console.log(movie)}\r\n                      <Link\r\n                        to={`/details/movie/${movie.id}`}\r\n                        style={{ height: '137px' }}\r\n                      >\r\n                        {movie.poster_path ? (\r\n                          <img\r\n                            alt={movie.title}\r\n                            className=\"searchPic\"\r\n                            src={`https://image.tmdb.org/t/p/w92/${movie.poster_path}`}\r\n                          ></img>\r\n                        ) : (\r\n                          <img\r\n                            className=\"searchPic\"\r\n                            src={posterHolder}\r\n                            alt={movie.title}\r\n                          ></img>\r\n                        )}\r\n                      </Link>\r\n                      <div>\r\n                        <Link\r\n                          to={`/details/movie/${movie.id}`}\r\n                          style={{\r\n                            textDecoration: 'none',\r\n                          }}\r\n                        >\r\n                          <Typography\r\n                            className=\"hoverStyleTitle\"\r\n                            variant=\"h6\"\r\n                            style={{\r\n                              margin: '5px 0px 5px 10px',\r\n                              color: 'black',\r\n                            }}\r\n                          >\r\n                            {movie.title}\r\n                          </Typography>\r\n                        </Link>\r\n                        {movie.release_date ? (\r\n                          <Typography style={{ margin: '5px 0px 5px 10px' }}>\r\n                            {movie.release_date.slice(0, 4)}\r\n                          </Typography>\r\n                        ) : (\r\n                          <Typography style={{ margin: '5px 0px 5px 10px' }}>\r\n                            Not Released\r\n                          </Typography>\r\n                        )}\r\n                      </div>\r\n                    </Paper>\r\n                  ))}\r\n                <PageNumNav\r\n                  setCurrentPage={setCurrentPage}\r\n                  currentPage={currentPage}\r\n                  totalPages={totalPagesMovies}\r\n                />\r\n              </div>\r\n            )}\r\n            {resultsType === 'TV' && (\r\n              <div>\r\n                {searchedTv.map((tv) => (\r\n                  <Paper\r\n                    style={{\r\n                      display: 'flex',\r\n                      marginBottom: '15px',\r\n                    }}\r\n                  >\r\n                    {console.log(tv)}\r\n                    <Link\r\n                      to={`/details/tv/${tv.id}`}\r\n                      style={{ height: '137px' }}\r\n                    >\r\n                      {tv.poster_path ? (\r\n                        <img\r\n                          alt={tv.name}\r\n                          className=\"searchPic\"\r\n                          src={`https://image.tmdb.org/t/p/w92/${tv.poster_path}`}\r\n                        ></img>\r\n                      ) : (\r\n                        <img\r\n                          className=\"searchPic\"\r\n                          src={posterHolder}\r\n                          alt={tv.name}\r\n                        ></img>\r\n                      )}\r\n                    </Link>\r\n                    <div>\r\n                      <Link\r\n                        to={`/details/movie/${tv.id}`}\r\n                        style={{ color: 'black', textDecoration: 'none' }}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          className=\"hoverStyleTitle\"\r\n                          style={{ margin: '5px 0px 5px 10px' }}\r\n                        >\r\n                          {tv.name}\r\n                        </Typography>\r\n                      </Link>\r\n                      {tv.first_air_date ? (\r\n                        <Typography style={{ margin: '5px 0px 5px 10px' }}>\r\n                          {tv.first_air_date.slice(0, 4)}\r\n                        </Typography>\r\n                      ) : (\r\n                        <Typography style={{ margin: '5px 0px 5px 10px' }}>\r\n                          Not Released\r\n                        </Typography>\r\n                      )}\r\n                    </div>\r\n                  </Paper>\r\n                ))}\r\n                <PageNumNav\r\n                  setCurrentPage={setCurrentPage}\r\n                  currentPage={currentPage}\r\n                  totalPages={totalPagesTv}\r\n                />\r\n              </div>\r\n            )}\r\n            {resultsType === 'People' && (\r\n              <div>\r\n                {searchedPeople.map((person) => (\r\n                  <Paper\r\n                    style={{\r\n                      display: 'flex',\r\n                      marginBottom: '15px',\r\n                    }}\r\n                  >\r\n                    {console.log(person)}\r\n                    <Link\r\n                      to={`/person/${person.id}`}\r\n                      style={{ height: '137px' }}\r\n                    >\r\n                      {person.profile_path ? (\r\n                        <img\r\n                          className=\"searchPic\"\r\n                          alt={person.name}\r\n                          src={`https://image.tmdb.org/t/p/w92/${person.profile_path}`}\r\n                        ></img>\r\n                      ) : (\r\n                        <img\r\n                          className=\"searchPic\"\r\n                          src={profilePicHolder}\r\n                          alt={person.name}\r\n                        ></img>\r\n                      )}\r\n                    </Link>\r\n                    <div>\r\n                      <Link\r\n                        to={`/person/${person.id}`}\r\n                        style={{ color: 'black', textDecoration: 'none' }}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          className=\"hoverStyleTitle\"\r\n                          style={{ margin: '5px 0px 5px 10px' }}\r\n                        >\r\n                          {person.name}\r\n                        </Typography>\r\n                      </Link>\r\n                      <Typography style={{ margin: '5px 0px 5px 10px' }}>\r\n                        {person.known_for_department}\r\n                      </Typography>\r\n                    </div>\r\n                  </Paper>\r\n                ))}\r\n                <PageNumNav\r\n                  setCurrentPage={setCurrentPage}\r\n                  currentPage={currentPage}\r\n                  totalPages={totalPagesPeople}\r\n                />\r\n              </div>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n      ) : (\r\n        <div className=\"spinner\"></div>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default SearchResults;\r\n","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\shared\\HamburgerMenu.js",[],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\shared\\kategorieTeilung.js",["175"],"export function kategorieTeilung(credits) {\r\n  let categories = {\r\n    production: [],\r\n    art: [],\r\n    crewMembers: [],\r\n    costume: [],\r\n    camera: [],\r\n    directing: [],\r\n    editing: [],\r\n    lighting: [],\r\n    sound: [],\r\n    visualEffects: [],\r\n    writing: [],\r\n  };\r\n\r\n  credits.map((crew) => {\r\n    if (crew.department === \"Production\") {\r\n      categories.production.push(crew);\r\n    } else if (crew.department === \"Art\") {\r\n      categories.art.push(crew);\r\n    } else if (crew.department === \"Crew\") {\r\n      categories.crewMembers.push(crew);\r\n    } else if (crew.department === \"Costume & Make-Up\") {\r\n      categories.costume.push(crew);\r\n    } else if (crew.department === \"Camera\") {\r\n      categories.camera.push(crew);\r\n    } else if (crew.department === \"Directing\") {\r\n      categories.directing.push(crew);\r\n    } else if (crew.department === \"Editing\") {\r\n      categories.editing.push(crew);\r\n    } else if (crew.department === \"Lighting\") {\r\n      categories.lighting.push(crew);\r\n    } else if (crew.department === \"Sound\") {\r\n      categories.sound.push(crew);\r\n    } else if (crew.department === \"Visual Effects\") {\r\n      categories.visualEffects.push(crew);\r\n    } else if (crew.department === \"Writing\") {\r\n      categories.writing.push(crew);\r\n    }\r\n  });\r\n  return categories;\r\n}\r\n","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\MovieDetails\\Review.js",[],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\shared\\MovieCard.js",["176"],"import React, { useState } from 'react';\r\nimport './style.scss';\r\nimport {\r\n  Typography,\r\n  Card,\r\n  CardMedia,\r\n  CardContent,\r\n  IconButton,\r\n  Box,\r\n  ClickAwayListener,\r\n} from '@material-ui/core';\r\nimport noImageHolder from '../../images/no_image_holder.png';\r\nimport { Link } from 'react-router-dom';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport RatingWheel from '../LandingPage/RatingWheel';\r\nimport { useUserId } from '../../contexts/SignedContext';\r\n\r\nimport MovieDropLoggedOut from './MovieDropLoggedOut';\r\nimport MovieDropLogged from './MovieDropLogged';\r\nimport { useSigned } from '../../contexts/SignedContext';\r\nconst MovieCard = ({ movie, imgWidth, imgHeight, mediaType }) => {\r\n  const signed = useSigned();\r\n  const userId = useUserId();\r\n\r\n  let borderRadius;\r\n  let height;\r\n  let shadow;\r\n  let bgColor;\r\n  if (imgWidth === '200') {\r\n    borderRadius = 0;\r\n    height = 382;\r\n    shadow = '5px 5px 18px #DAD7D7';\r\n  } else {\r\n    bgColor = '#FAFAFA';\r\n    shadow = 'none';\r\n    borderRadius = 5;\r\n    height = 'auto';\r\n  }\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      backgroundColor: `${bgColor}`,\r\n      overflow: 'visible',\r\n      height: `${height}px`,\r\n      justifySelf: 'center',\r\n      margin: '15px',\r\n      position: 'relative',\r\n      boxShadow: `${shadow}`,\r\n      padding: 0,\r\n    },\r\n    cardMedia: {\r\n      width: `${imgWidth}px`,\r\n      height: `${imgHeight}px`,\r\n      borderRadius: '5px 5px 0 0',\r\n    },\r\n  }));\r\n\r\n  const [dropDown, setDropDown] = useState(false);\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <Card className={classes.root} key={movie.id}>\r\n      {imgWidth === '200' ? (\r\n        <RatingWheel\r\n          rating={(movie.vote_average * 10).toFixed()}\r\n          discover={true}\r\n        ></RatingWheel>\r\n      ) : (\r\n        <RatingWheel rating={(movie.vote_average * 10).toFixed()}></RatingWheel>\r\n      )}\r\n      <ClickAwayListener onClickAway={() => setDropDown(false)}>\r\n        <Box>\r\n          <IconButton\r\n            className=\"dropDownButton\"\r\n            disableFocusRipple\r\n            disableRipple\r\n            children={<MoreVertIcon />}\r\n            onClick={() => setDropDown(!dropDown)}\r\n            style={{\r\n              backgroundColor: 'rgba(255, 255, 255, 0.3)',\r\n              position: 'absolute',\r\n              right: '5px',\r\n              padding: '0px',\r\n              top: '5px',\r\n            }}\r\n          ></IconButton>\r\n          {dropDown && !signed && <MovieDropLoggedOut />}\r\n          {dropDown && signed && (\r\n            <MovieDropLogged\r\n              mediaType={mediaType}\r\n              movieId={movie.id}\r\n              userId={userId}\r\n            />\r\n          )}\r\n        </Box>\r\n      </ClickAwayListener>\r\n\r\n      <Link\r\n        style={{ width: '200px' }}\r\n        to={{\r\n          pathname: `/details/${mediaType}/${movie.id}`,\r\n        }}\r\n      >\r\n        {movie.poster_path ? (\r\n          <CardMedia\r\n            className={classes.cardMedia}\r\n            image={`https://image.tmdb.org/t/p/w${imgWidth}${movie.poster_path}`}\r\n            title={movie.title}\r\n          ></CardMedia>\r\n        ) : (\r\n          <CardMedia\r\n            className={classes.cardMedia}\r\n            image={noImageHolder}\r\n            title={movie.title}\r\n          ></CardMedia>\r\n        )}\r\n      </Link>\r\n      <CardContent style={{ padding: '0px', marginLeft: '3px' }}>\r\n        <Link\r\n          props={movie.id}\r\n          to={`/details/${mediaType}/${movie.id}/`}\r\n          style={{ textDecoration: 'none' }}\r\n        >\r\n          <Typography\r\n            className=\"hoverLink\"\r\n            variant=\"body2\"\r\n            color=\"textPrimary\"\r\n            component=\"p\"\r\n            style={{\r\n              '&:hover': { cursor: 'pointer' },\r\n              marginTop: '3px',\r\n            }}\r\n          >\r\n            {movie.title}\r\n            {movie.name}\r\n          </Typography>\r\n        </Link>\r\n        <Typography\r\n          variant=\"body2\"\r\n          color=\"textSecondary\"\r\n          component=\"p\"\r\n          style={{ verticalAlign: 'text-bottom' }}\r\n        >\r\n          {movie.first_air_date && movie.first_air_date.slice(0, 4)}\r\n          {movie.release_date && movie.release_date.slice(0, 4)}\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default MovieCard;\r\n","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\Credits\\CreditsPerson.js",[],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\MovieDetails\\TopBilledCast.js",[],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\Discover\\MovieCardPhone.js",[],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\MovieDetails\\TopMovie.js",["177"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport image_holder from \"../../images/no_image_holder.png\";\r\nimport { Grid, Box } from \"@material-ui/core\";\r\nimport { useMediaQuery } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../../linkStyle.scss\";\r\nimport \"./styles.scss\";\r\nimport MediaActions from \"./MediaActions\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  actorImage: {\r\n    borderRadius: \"5px 5px 0 0\",\r\n  },\r\n  container: {\r\n    backgroundColor: \"#EEEEEE\",\r\n  },\r\n  actorPaper: {\r\n    margin: \"10px\",\r\n  },\r\n  acotrSubtitle: {\r\n    fontSize: \"12px\",\r\n\r\n    fontWeight: \"bold\",\r\n    color: \"#757575\",\r\n  },\r\n  textStyle: {\r\n    margin: \"5px\",\r\n    marginLeft: \"15px\",\r\n  },\r\n  topMoviePhone: {\r\n    position: \"relative\",\r\n  },\r\n  sideInfo: {\r\n    overflow: \"hidden\",\r\n    color: \"white\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    position: \"relative\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n  movie_poster: {\r\n    [theme.breakpoints.down(\"md\")]: {\r\n      display: \"flex\",\r\n    },\r\n  },\r\n  gridImage: {\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      justifyContent: \"flex-start\",\r\n      display: \"flex\",\r\n      alignContent: \"flex-end\",\r\n      objectFit: \"contain\",\r\n    },\r\n  },\r\n  topMovieContainer: {\r\n    zIndex: 10,\r\n    display: \"flex\",\r\n    height: \"632px\",\r\n    alignItems: \"center\",\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      justifyContent: \"flex-start\",\r\n      height: \"320px\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst TopMovie = ({ movieDetails, director, writer, mediaType }) => {\r\n  const isMobile = useMediaQuery(\"(max-width: 600px)\");\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.topMovieContainer}>\r\n      <Grid container justify=\"flex-start\" style={{ flexWrap: \"nowrap\" }}>\r\n        <Grid\r\n          className={classes.gridImage}\r\n          item\r\n          style={{\r\n            display: \"flex\",\r\n\r\n            zIndex: 1,\r\n          }}\r\n        >\r\n          {movieDetails.poster_path ? (\r\n            <img\r\n              alt={movieDetails.title && movieDetails.name}\r\n              className={classes.movie_poster}\r\n              style={{\r\n                borderRadius: \"5px\",\r\n              }}\r\n              src={\r\n                isMobile\r\n                  ? `https://image.tmdb.org/t/p/w154${movieDetails.poster_path}`\r\n                  : `https://image.tmdb.org/t/p/w300${movieDetails.poster_path}`\r\n              }\r\n            ></img>\r\n          ) : (\r\n            <img\r\n              alt={movieDetails.title && movieDetails.name}\r\n              style={{\r\n                borderRadius: \"5px\",\r\n                width: isMobile ? \"154px\" : \"300px\",\r\n              }}\r\n              src={image_holder}\r\n            ></img>\r\n          )}\r\n        </Grid>\r\n        <Grid item className={classes.sideInfo}>\r\n          <Typography variant=\"h5\" className={classes.textStyle}>\r\n            {movieDetails.title && movieDetails.title}\r\n            {movieDetails.name && movieDetails.name}\r\n            {movieDetails.release_date &&\r\n              \" (\" + movieDetails.release_date.slice(0, 4) + \")\"}\r\n          </Typography>\r\n          {/* <MediaActions movieId={movieDetails.id} mediaType={mediaType} /> */}\r\n          <Typography\r\n            component=\"div\"\r\n            className={classes.textStyle}\r\n            style={{\r\n              display: \"flex\",\r\n              padding: 0,\r\n              alignContent: \"flex-start\",\r\n              flexWrap: \"wrap\",\r\n            }}\r\n          >\r\n            {movieDetails.genres &&\r\n              movieDetails.genres.map((genre) => (\r\n                <p style={{ margin: 0, marginRight: \"5px\" }} key={genre.name}>\r\n                  {genre.name}\r\n                </p>\r\n              ))}\r\n          </Typography>\r\n\r\n          <Typography className={classes.textStyle}>\r\n            Rating:{\" \"}\r\n            {movieDetails.vote_average\r\n              ? movieDetails.vote_average * 10 + \"%\"\r\n              : \"Not Yet Rated\"}\r\n          </Typography>\r\n\r\n          <Typography className={classes.textStyle}>\r\n            {movieDetails.runtime > 0 &&\r\n              Math.floor(movieDetails.runtime / 60) + \"h\"}{\" \"}\r\n            {movieDetails.runtime > 0 && (movieDetails.runtime % 60) + \"m\"}\r\n          </Typography>\r\n\r\n          {isMobile || (\r\n            <Box>\r\n              <Typography variant=\"h6\" className={classes.textStyle}>\r\n                Overview\r\n              </Typography>\r\n              <Typography className={classes.textStyle}>\r\n                {movieDetails.overview}\r\n              </Typography>\r\n            </Box>\r\n          )}\r\n\r\n          <div>\r\n            {director && (\r\n              <div className={classes.textStyle}>\r\n                <Typography variant=\"h6\">Director</Typography>\r\n                <Link\r\n                  to={`/person/${director.id}/`}\r\n                  style={{ textDecoration: \"none\", color: \"white\" }}\r\n                >\r\n                  <Typography className=\"linkStyle\">{director.name}</Typography>\r\n                </Link>\r\n              </div>\r\n            )}\r\n            {writer && (\r\n              <div className={classes.textStyle}>\r\n                <Typography variant=\"h6\">Writer</Typography>\r\n                <Link\r\n                  to={`/person/${writer.id}/`}\r\n                  style={{ textDecoration: \"none\", color: \"white\" }}\r\n                >\r\n                  <Typography className=\"linkStyle\">{writer.name}</Typography>\r\n                </Link>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TopMovie;\r\n","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\MovieDetails\\SideInfo.js",["178"],"import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { Typography, Button } from '@material-ui/core';\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport { useMediaQuery } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/styles';\r\nconst useStyles = makeStyles({\r\n  hideKeywords: {\r\n    display: 'none',\r\n  },\r\n});\r\nconst SideInfo = ({ movieId, movieDetails, mediaType }) => {\r\n  const classes = useStyles();\r\n\r\n  const [keywords, setKeywords] = useState(null);\r\n  const isMobile = useMediaQuery('(max-width: 600px)');\r\n  const [loaded, setLoaded] = useState(false);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const keywords = await axios.get(\r\n        `http://localhost:5000/details/${mediaType}/keywords`,\r\n        {\r\n          params: { id: movieId },\r\n        }\r\n      );\r\n      if (keywords.data.results) {\r\n        setKeywords(keywords.data.results);\r\n      } else {\r\n        setKeywords(keywords.data.keywords);\r\n      }\r\n\r\n      setLoaded(true);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n  return (\r\n    loaded && (\r\n      <div style={{ marginLeft: '30px' }}>\r\n        <Typography variant=\"h6\">Status</Typography>\r\n        {movieDetails.status !== '' ? (\r\n          <Typography>{movieDetails.status}</Typography>\r\n        ) : (\r\n          '-'\r\n        )}\r\n        <Typography variant=\"h6\">Original Language</Typography>\r\n        {movieDetails.original_language !== '' ? (\r\n          <Typography>{movieDetails.original_language}</Typography>\r\n        ) : (\r\n          '-'\r\n        )}\r\n        <Typography variant=\"h6\">Budget</Typography>\r\n        {movieDetails.budget ? (\r\n          movieDetails.budget > 1000 ? (\r\n            movieDetails.budget > 1000000 ? (\r\n              <Typography>{movieDetails.budget / 1000000} million</Typography>\r\n            ) : (\r\n              <Typography>{movieDetails.budget / 1000} thousand</Typography>\r\n            )\r\n          ) : (\r\n            <Typography>{movieDetails.budget}</Typography>\r\n          )\r\n        ) : (\r\n          '-'\r\n        )}\r\n        <Typography variant=\"h6\">Revenue</Typography>\r\n        {movieDetails.revenue ? (\r\n          movieDetails.revenue > 1000 ? (\r\n            movieDetails.revenue > 1000000 ? (\r\n              <Typography>\r\n                {Number(movieDetails.revenue / 1000000).toFixed(2)} million\r\n              </Typography>\r\n            ) : (\r\n              <Typography>\r\n                {Number(movieDetails.revenue / 1000).toFixed(2)} thousand\r\n              </Typography>\r\n            )\r\n          ) : (\r\n            <Typography>{Number(movieDetails.revenue).toFixed(2)} $</Typography>\r\n          )\r\n        ) : (\r\n          '-'\r\n        )}\r\n        <div className={isMobile && classes.hideKeywords}>\r\n          <Typography variant=\"h6\" style={{ margin: '10px 0 10px 0' }}>\r\n            Keywords\r\n          </Typography>\r\n          <div style={{ display: 'flex', flexWrap: 'wrap' }}>\r\n            {keywords ? (\r\n              keywords.map((keyword) => (\r\n                <Link\r\n                  key={keyword.id}\r\n                  to={{\r\n                    pathname: `/search/${keyword.name}`,\r\n                    state: keyword.name,\r\n                  }}\r\n                  style={{ textDecoration: 'none' }}\r\n                >\r\n                  <Button\r\n                    onClick={(e) => {\r\n                      localStorage.setItem('searchString', keyword.name);\r\n                    }}\r\n                    variant=\"outlined\"\r\n                    style={{ margin: '5px', padding: '4px' }}\r\n                  >\r\n                    {keyword.name}\r\n                  </Button>\r\n                </Link>\r\n              ))\r\n            ) : (\r\n              <Typography>No keywords have been added.</Typography>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  );\r\n};\r\n\r\nexport default SideInfo;\r\n","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\LandingPage\\MovieSlider.js",[],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\SearchPage\\SearchResultsSide.js",["179"],"import React, { useState, useEffect } from 'react';\r\nimport { Typography, Button, Paper, useMediaQuery } from '@material-ui/core';\r\n\r\nimport './style.scss';\r\n\r\nconst SearchResultsSide = ({\r\n  totalResultsTv,\r\n  totalResultsMovies,\r\n  totalResultsPeople,\r\n  setResultsType,\r\n  setCurrentPage,\r\n}) => {\r\n  const [categories, setCategories] = useState([]);\r\n  const isSmall = useMediaQuery('(max-width: 100px)');\r\n\r\n  useEffect(() => {\r\n    setCategories(\r\n      [\r\n        {\r\n          category: 'Movies',\r\n          totalResults: totalResultsMovies,\r\n        },\r\n        {\r\n          category: 'TV',\r\n          totalResults: totalResultsTv,\r\n        },\r\n        {\r\n          category: 'People',\r\n          totalResults: totalResultsPeople,\r\n        },\r\n      ].sort((a, b) => (a.totalResults < b.totalResults ? 1 : -1)),\r\n      () => {\r\n        setResultsType(categories[0].category);\r\n      }\r\n    );\r\n  }, [totalResultsTv, totalResultsMovies, totalResultsPeople]);\r\n\r\n  console.log('CATE', isSmall);\r\n  return (\r\n    <div className=\"yes\">\r\n      <Paper style={{ width: '250px' }} className=\"searchCategoriesContainer\">\r\n        <Typography\r\n          variant=\"h6\"\r\n          style={{\r\n            padding: '10px',\r\n            backgroundColor: '#01B4E4',\r\n            color: 'white',\r\n            borderRadius: '5px 5px 0 0',\r\n          }}\r\n        >\r\n          Search Categories\r\n        </Typography>\r\n        {categories.map((category) => (\r\n          <div\r\n            className=\"hoverStyle\"\r\n            style={{\r\n              display: 'flex',\r\n              justifyContent: 'space-between',\r\n              alignItems: 'center',\r\n              padding: '5px 10px 5px 10px',\r\n            }}\r\n          >\r\n            <Button\r\n              variant=\"text\"\r\n              onClick={() => {\r\n                setCurrentPage(1);\r\n                setResultsType(category.category);\r\n              }}\r\n            >\r\n              {category.category}\r\n            </Button>\r\n            <Typography\r\n              className=\"results\"\r\n              style={{ padding: '0 13px 0 13px', borderRadius: '15px' }}\r\n            >\r\n              {category.totalResults}\r\n            </Typography>\r\n          </div>\r\n        ))}\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchResultsSide;\r\n","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\LandingPage\\TrendingPeople.js",[],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\ActorPage\\ActorCredits.js",[],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\SearchPage\\PageNumNav.js",["180"],"import React from 'react';\r\nimport { Button, Typography } from '@material-ui/core';\r\n\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\n\r\nconst PageNumNav = ({ totalPages, currentPage, setCurrentPage }) => {\r\n  let totalPagesArray = Array.from(Array(totalPages), (_, x) => x);\r\n  return (\r\n    <div>\r\n      <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n        {totalPages ? (\r\n          <Button>\r\n            <FirstPageIcon onClick={() => setCurrentPage(1)} />\r\n          </Button>\r\n        ) : (\r\n          <Typography variant=\"h5\">No Results</Typography>\r\n        )}\r\n\r\n        {totalPagesArray.map((pageNum) => {\r\n          if (\r\n            pageNum + 1 >= totalPages - 7 &&\r\n            currentPage <= totalPages &&\r\n            currentPage >= totalPages - 4\r\n          ) {\r\n            if (pageNum + 1 === currentPage) {\r\n              return (\r\n                <Button\r\n                  style={{ backgroundColor: '#032541', color: 'white' }}\r\n                  onClick={() => setCurrentPage(pageNum + 1)}\r\n                >\r\n                  <Typography>{pageNum + 1}</Typography>\r\n                </Button>\r\n              );\r\n            } else {\r\n              return (\r\n                <Button onClick={() => setCurrentPage(pageNum + 1)}>\r\n                  <Typography variant=\"body2\">{pageNum + 1}</Typography>\r\n                </Button>\r\n              );\r\n            }\r\n          } else if (pageNum < 7 && currentPage < 7) {\r\n            console.log('FIRST CONDITION');\r\n            if (pageNum + 1 === currentPage) {\r\n              return (\r\n                <Button\r\n                  style={{ backgroundColor: '#032541', color: 'white' }}\r\n                  onClick={() => setCurrentPage(pageNum + 1)}\r\n                >\r\n                  <Typography>{pageNum + 1}</Typography>\r\n                </Button>\r\n              );\r\n            } else {\r\n              return (\r\n                <Button onClick={() => setCurrentPage(pageNum + 1)}>\r\n                  <Typography>{pageNum + 1}</Typography>\r\n                </Button>\r\n              );\r\n            }\r\n          } else if (\r\n            currentPage > pageNum - 3 &&\r\n            currentPage < pageNum + 5 &&\r\n            currentPage >= 7 &&\r\n            pageNum + 1 < totalPages - 1\r\n          ) {\r\n            console.log('SECOND CONDITION');\r\n            if (pageNum + 1 === currentPage) {\r\n              return (\r\n                <Button\r\n                  style={{ backgroundColor: '#032541', color: 'white' }}\r\n                  onClick={() => setCurrentPage(pageNum + 1)}\r\n                >\r\n                  <Typography>{pageNum + 1}</Typography>\r\n                </Button>\r\n              );\r\n            } else {\r\n              return (\r\n                <Button onClick={() => setCurrentPage(pageNum + 1)}>\r\n                  {pageNum + 1}\r\n                </Button>\r\n              );\r\n            }\r\n          }\r\n        })}\r\n        {totalPages ? (\r\n          <Button onClick={() => setCurrentPage(totalPages)}>\r\n            <LastPageIcon />\r\n          </Button>\r\n        ) : (\r\n          <div></div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PageNumNav;\r\n","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\Discover\\Searcher\\Searcher.js",["181","182","183"],"import React, { useState, useRef, useEffect } from \"react\";\r\n\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport GenreCheckboxes from \"./GenreCheckboxes\";\r\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport {\r\n  Button,\r\n  InputBase,\r\n  InputLabel,\r\n  NativeSelect,\r\n  FormLabel,\r\n} from \"@material-ui/core\";\r\nimport \"../style.scss\";\r\n\r\nconst CustomInput = withStyles((theme) => ({\r\n  root: {\r\n    \"label + &\": {\r\n      marginTop: theme.spacing(3),\r\n    },\r\n  },\r\n\r\n  input: {\r\n    padding: \"10px\",\r\n    borderRadius: 3,\r\n    position: \"relative\",\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"1px solid #ced4da\",\r\n    fontSize: 16,\r\n\r\n    // transition: theme.transitions.create([\"border-color\", \"box-shadow\"]),\r\n    // Use the system font instead of the default Roboto font.\r\n\r\n    \"&:focus\": {\r\n      borderRadius: 3,\r\n      borderColor: \"#80bdff\",\r\n      boxShadow: \"0 0 0 0.1rem rgba(0,0,0, 0.5)\",\r\n    },\r\n    \"&:hover\": {\r\n      borderRadius: 3,\r\n      borderColor: \"#80bdff\",\r\n      boxShadow: \"0 0 0 0.1rem rgba(0,0,0, 0.5)\",\r\n    },\r\n  },\r\n}))(InputBase);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  sortSelect: {},\r\n  searcherContainer: {\r\n    maxWidth: \"270px\",\r\n    [theme.breakpoints.down(\"760\")]: {\r\n      display: \"flex\",\r\n      justifyContent: \"center\",\r\n      maxWidth: \"100%\",\r\n    },\r\n  },\r\n  filterOptions: {\r\n    color: \"black\",\r\n    padding: \"3px\",\r\n    borderRadius: \"6px\",\r\n    boxShadow: \"1px 1px 5px #9fa1a6\",\r\n    marginTop: \"10px\",\r\n  },\r\n  optionsToggle: {\r\n    width: \"270px\",\r\n    justifyContent: \"flex-start\",\r\n  },\r\n  margin: {\r\n    marginTop: \"10px\",\r\n  },\r\n\r\n  form: {\r\n    width: \"250px\",\r\n    [theme.breakpoints.down(\"760\")]: {\r\n      width: \"100%\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Searcher = ({\r\n  setRuntime,\r\n  setScore,\r\n  score,\r\n  setSortOption,\r\n  runtime,\r\n  genres,\r\n  setReleaseDate,\r\n  submitHandle,\r\n  setLanguage,\r\n  mediaType,\r\n  setMediaType,\r\n  sortOption,\r\n  language,\r\n  releaseDate,\r\n  setGenres,\r\n}) => {\r\n  const releaseMarks = [\r\n    {\r\n      value: 1900,\r\n      label: \"1900\",\r\n    },\r\n    {\r\n      value: 2021,\r\n      label: \"2021\",\r\n    },\r\n  ];\r\n  const runtimeMarks = [\r\n    {\r\n      value: 0,\r\n      label: \"0\",\r\n    },\r\n    {\r\n      value: 120,\r\n      label: \"120\",\r\n    },\r\n    {\r\n      value: 240,\r\n      label: \"240\",\r\n    },\r\n    {\r\n      value: 360,\r\n      label: \"360\",\r\n    },\r\n  ];\r\n  const marks = [\r\n    {\r\n      value: 0,\r\n      label: \"0\",\r\n    },\r\n    {\r\n      value: 5,\r\n      label: \"|\",\r\n    },\r\n    {\r\n      value: 10,\r\n      label: \"10\",\r\n    },\r\n  ];\r\n\r\n  const sortSelect = useRef(null);\r\n  const [showSort, setShowSort] = useState(false);\r\n  const [showFilters, setShowFilters] = useState(false);\r\n  const date = new Date();\r\n\r\n  let yearRange = new Array();\r\n  for (\r\n    let i = 0, years = 1870;\r\n    years <= date.toISOString().slice(0, 4);\r\n    i++, years++\r\n  ) {\r\n    yearRange[i] = years;\r\n  }\r\n\r\n  const handleRuntime = (e, newValue) => {\r\n    setRuntime(newValue);\r\n  };\r\n  const handleScore = (e, newValue) => {\r\n    setScore(newValue);\r\n  };\r\n  const handleReleaseDate = (e, newValue) => {\r\n    setReleaseDate(newValue);\r\n  };\r\n\r\n  const classes = useStyles();\r\n  useEffect(() => {\r\n    setSortOption(sortSelect.current.childNodes[0].value);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.searcherContainer}>\r\n      <form\r\n        className={classes.form}\r\n        onSubmit={(e) => {\r\n          submitHandle();\r\n          e.preventDefault();\r\n        }}\r\n      >\r\n        <div className={classes.filterOptions}>\r\n          <Button\r\n            style={{\r\n              width: \"100%\",\r\n              justifyContent: \"space-between\",\r\n              color: \"black\",\r\n              fontWeight: 600,\r\n              fontSize: \"18px\",\r\n            }}\r\n            onClick={() => setShowSort(!showSort)}\r\n            className={classes.optionsToggle}\r\n            endIcon={showSort ? <ExpandLessIcon /> : <ExpandMoreIcon />}\r\n          >\r\n            Sort\r\n          </Button>\r\n          <div\r\n            style={{\r\n              display: showSort ? \"block\" : \"none\",\r\n              padding: \"5px 20px 20px 20px\",\r\n            }}\r\n          >\r\n            <FormControl fullWidth>\r\n              <InputLabel htmlFor=\"sortingOptions\" disableAnimation=\"true\">\r\n                Sorting Options\r\n              </InputLabel>\r\n              <NativeSelect\r\n                className={classes.sortSelect}\r\n                id=\"sortingOptions\"\r\n                input={<CustomInput />}\r\n                margin=\"dense\"\r\n                onChange={(e) => setSortOption(e.target.value)}\r\n                ref={sortSelect}\r\n                value={sortOption}\r\n              >\r\n                <option value=\"popularity.desc\">Popularity Descending</option>\r\n                <option value=\"popularity.asc\">Popularity Ascending</option>\r\n                <option value=\"vote_average.desc\">Rating Descending</option>\r\n                <option value=\"vote_average.asc\">Rating Ascending</option>\r\n                <option value=\"release_date.desc\">\r\n                  Release Date Descending\r\n                </option>\r\n                <option value=\"release_date.asc\">Release Date Ascending</option>\r\n                <option value=\"revenue.desc\">Revenue Descending</option>\r\n                <option value=\"revenue.asc\">Revenue Date Ascending</option>\r\n                <option value=\"original_title.desc\">\r\n                  Original Title Descending\r\n                </option>\r\n                <option value=\"original_title.asc\">\r\n                  Original Title Date Ascending\r\n                </option>\r\n\r\n                <option value=\"vote_count.desc\">Vote Count Descending</option>\r\n                <option value=\"vote_count.asc\">Vote Count Ascending</option>\r\n              </NativeSelect>\r\n            </FormControl>\r\n          </div>\r\n\r\n          {/* </select> */}\r\n        </div>\r\n        <div className={classes.filterOptions}>\r\n          <Button\r\n            style={{\r\n              width: \"100%\",\r\n              color: \"black\",\r\n              fontWeight: 600,\r\n              fontSize: \"18px\",\r\n              justifyContent: \"space-between\",\r\n            }}\r\n            endIcon={showFilters ? <ExpandLessIcon /> : <ExpandMoreIcon />}\r\n            onClick={() => setShowFilters(!showFilters)}\r\n            className={classes.optionsToggle}\r\n          >\r\n            Filters\r\n          </Button>\r\n          <div\r\n            style={{\r\n              display: showFilters ? \"flex\" : \"none\",\r\n              justifyContent: \"flex-start\",\r\n              flexDirection: \"column\",\r\n              padding: \"20px 30px 20px 20px\",\r\n            }}\r\n          >\r\n            <div style={{ display: showFilters ? \"block\" : \"none\" }}>\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-between\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                <Typography>Movies</Typography>\r\n\r\n                <FormControlLabel\r\n                  value=\"top\"\r\n                  control={\r\n                    <Switch\r\n                      checked={mediaType}\r\n                      onChange={() => {\r\n                        setMediaType(!mediaType);\r\n                        setGenres(\" \");\r\n                      }}\r\n                      color=\"primary\"\r\n                    />\r\n                  }\r\n                />\r\n                <Typography>Tv</Typography>\r\n              </div>\r\n              <GenreCheckboxes\r\n                genres={genres}\r\n                setGenres={setGenres}\r\n                movieOrTv={mediaType}\r\n              />\r\n              <FormLabel component=\"legend\">Genres</FormLabel>\r\n\r\n              <FormControl fullWidth>\r\n                <InputLabel\r\n                  htmlFor=\"languageOptions\"\r\n                  disableAnimation=\"true\"\r\n                  shrink={false}\r\n                >\r\n                  Language\r\n                </InputLabel>\r\n                <NativeSelect\r\n                  className={classes.sortSelect}\r\n                  id=\"languageOptions\"\r\n                  input={<CustomInput />}\r\n                  onChange={(e) => setLanguage(e.target.value)}\r\n                  name=\"sort\"\r\n                  id=\"languageOptions\"\r\n                  value={language}\r\n                >\r\n                  <option value=\"en\">English</option>\r\n                  <option value=\"fr\">French</option>\r\n                  <option value=\"de\">German</option>\r\n                  <option value=\"es\">Spanish</option>\r\n                  <option value=\"ja\">Japanese</option>\r\n                  <option value=\"zh\">Chinese</option>\r\n                  <option value=\"hi\">Hindi</option>\r\n                  <option value=\"ar\">Arabic</option>\r\n                  <option value=\"bn\">Bengali</option>\r\n                  <option value=\"pt\">Portugese</option>\r\n                  <option value=\"ru\">Russion</option>\r\n                  <option value=\"sk\">Slovak</option>\r\n                </NativeSelect>\r\n              </FormControl>\r\n            </div>\r\n            <Typography className={classes.margin}>\r\n              Release Range (Years)\r\n            </Typography>\r\n            <Slider\r\n              value={releaseDate}\r\n              onChange={handleReleaseDate}\r\n              valueLabelDisplay=\"auto\"\r\n              min={1900}\r\n              max={2021}\r\n              marks={releaseMarks}\r\n              aria-labelledby=\"range-slider\"\r\n            />{\" \"}\r\n            <Typography className={classes.margin}>\r\n              Runtime (Minutes)\r\n            </Typography>\r\n            <Slider\r\n              value={runtime}\r\n              onChange={handleRuntime}\r\n              valueLabelDisplay=\"auto\"\r\n              min={0}\r\n              max={360}\r\n              marks={runtimeMarks}\r\n              aria-labelledby=\"range-slider\"\r\n            />\r\n            <Typography className={classes.margin}>\r\n              User Rating (0-10)\r\n            </Typography>\r\n            <Slider\r\n              className=\"slider\"\r\n              value={score}\r\n              onChange={handleScore}\r\n              valueLabelDisplay=\"auto\"\r\n              min={0}\r\n              max={10}\r\n              aria-labelledby=\"range-slider\"\r\n              marks={marks}\r\n            />\r\n          </div>\r\n        </div>\r\n        <Button\r\n          className={classes.margin}\r\n          variant=\"contained\"\r\n          type=\"submit\"\r\n          color=\"primary\"\r\n          fullWidth\r\n          style={{\r\n            fontWeight: 600,\r\n            fontSize: \"18px\",\r\n            display: \"block\",\r\n            borderRadius: \"15px\",\r\n            height: \"40px\",\r\n          }}\r\n        >\r\n          Search\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Searcher;\r\n","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\shared\\MovieDropLogged.js",["184"],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\MovieDetails\\MediaActions.js",["185","186"],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\ActorPage\\ActorCreditCategory.js",[],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\Discover\\Searcher\\GenreCheckboxes.js",["187"],"import React, { useEffect } from \"react\";\r\nimport { FormControlLabel, FormGroup, Checkbox } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n  margin: {\r\n    margin: 0,\r\n  },\r\n});\r\n\r\nconst GenreCheckboxes = ({ setGenres, genres, movieOrTv }) => {\r\n  const genreCheckboxHandle = (e) => {\r\n    if (e.target.checked) {\r\n      console.log(genres + \",\" + e.target.value);\r\n      setGenres(genres + \",\" + e.target.value);\r\n      console.log(genres);\r\n    } else {\r\n      console.log(\"HEHEEH\", genres);\r\n      setGenres(genres.replace(\",\" + e.target.value, \"\"));\r\n    }\r\n  };\r\n  const classes = useStyles();\r\n  console.log(Array.from(document.getElementsByClassName(\"checkbox\"))[0]);\r\n  console.log(\"MEDIA TYPE\", movieOrTv);\r\n  return (\r\n    <div>\r\n      {movieOrTv ? (\r\n        <FormGroup aria-label=\"position\" row>\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"10762\"\r\n            control={<Checkbox color=\"primary\" className=\"checkbox\" />}\r\n            label=\"Kids\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"16\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Animation\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"10759\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Action & Adventure\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"10768\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"War & Politics\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"10767\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Talk\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"99\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Documentary\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"80\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Crime\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"10763\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"News\"\r\n            labelPlacement=\"start\"\r\n          />\r\n\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"35\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Comedy\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"18\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Drama\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"10765\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Sci-Fi & Fantasy\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"9648\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Mystery\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"10766\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Soap\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"53\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Thriller\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"37\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Western\"\r\n            labelPlacement=\"start\"\r\n          />\r\n        </FormGroup>\r\n      ) : (\r\n        <FormGroup aria-label=\"position\" row>\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"27\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Horror\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"12\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Adventure\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"28\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Action\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"878\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Sci-fi\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"99\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Documentary\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"80\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Crime\"\r\n            labelPlacement=\"start\"\r\n          />\r\n\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"16\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Animation\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"35\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Comedy\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"18\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Drama\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"14\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Fantasy\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"9648\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Mystery\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"10749\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Romance\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"53\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Thriller\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            onChange={(e) => genreCheckboxHandle(e)}\r\n            className={classes.margin}\r\n            value=\"37\"\r\n            control={<Checkbox color=\"primary\" />}\r\n            label=\"Western\"\r\n            labelPlacement=\"start\"\r\n          />\r\n        </FormGroup>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default GenreCheckboxes;\r\n","C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\shared\\MovieDropLoggedOut.js",[],"C:\\Users\\roman\\Documents\\Code\\zmdbi\\zmdbi\\client\\src\\components\\LandingPage\\RatingWheel.js",["188"],"import React, { useRef, useEffect } from \"react\";\r\n\r\nexport const RatingWheel = ({ rating, discover }) => {\r\n  const canvasRef = useRef(null);\r\n  const radius = (2 / 100) * rating;\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n\r\n    ctx.beginPath();\r\n    ctx.lineWidth = 6;\r\n\r\n    //Rating wheel border dependent on rating\r\n    if (radius) {\r\n      if (rating < 55) {\r\n        ctx.strokeStyle = \"orange\";\r\n      } else if (rating <= 30) {\r\n        ctx.strokeStyle = \"gray\";\r\n      } else {\r\n        ctx.strokeStyle = \"green\";\r\n      }\r\n\r\n      ctx.arc(22, 22, 18, 0, radius * Math.PI);\r\n      ctx.stroke();\r\n    } else {\r\n      ctx.strokeStyle = \"red\";\r\n      ctx.arc(22, 22, 18, 0, 2 * Math.PI);\r\n      ctx.stroke();\r\n    }\r\n    //Black middle of the rating wheel\r\n    ctx.beginPath();\r\n    ctx.arc(22, 22, 17, 0, 2 * Math.PI);\r\n    ctx.fill();\r\n\r\n    ctx.beginPath();\r\n    ctx.fillStyle = \"white\";\r\n    if (rating === 100) {\r\n      ctx.font = \"700 13px Roboto\";\r\n      ctx.fillText(`${rating}%`, 6, 26, 36);\r\n    } else if (rating) {\r\n      ctx.font = \"700 14px Roboto\";\r\n      ctx.fillText(`${rating}%`, 9, 27, 36);\r\n    } else {\r\n      ctx.font = \"700 14px Roboto\";\r\n      ctx.fillText(`NR`, 12, 27, 36);\r\n    }\r\n  }, []);\r\n\r\n  // var myFont = new FontFace(\r\n  //   \"My Font\",\r\n  //   \"url(https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap)\"\r\n  // );\r\n  // let fontLoaded = false;\r\n  // myFont.load().then(function (font) {\r\n  //   // with canvas, if this is ommited won't work\r\n  //   document.fonts.add(font);\r\n  //   fontLoaded = true;\r\n  //   console.log(\"Font loaded\");\r\n  // });\r\n\r\n  return (\r\n    <div style={{ fontFamily: \"Roboto\" }}>\r\n      {discover ? (\r\n        <canvas\r\n          width=\"44px\"\r\n          height=\"44px\"\r\n          ref={canvasRef}\r\n          {...rating}\r\n          style={{\r\n            borderColor: \"blue\",\r\n            position: \"absolute\",\r\n            top: \"3px\",\r\n            right: \"152px\",\r\n          }}\r\n        ></canvas>\r\n      ) : (\r\n        <canvas\r\n          width=\"44px\"\r\n          height=\"44px\"\r\n          ref={canvasRef}\r\n          {...rating}\r\n          style={{\r\n            fontFamily: \"Roboto\",\r\n            borderColor: \"blue\",\r\n            position: \"absolute\",\r\n            top: \"1px\",\r\n            right: \"108px\",\r\n          }}\r\n        ></canvas>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default RatingWheel;\r\n",{"ruleId":"189","replacedBy":"190"},{"ruleId":"191","replacedBy":"192"},{"ruleId":"193","severity":1,"message":"194","line":31,"column":6,"nodeType":"195","endLine":31,"endColumn":8,"suggestions":"196"},{"ruleId":"197","severity":1,"message":"198","line":153,"column":24,"nodeType":"199","messageId":"200","endLine":153,"endColumn":39},{"ruleId":"197","severity":1,"message":"201","line":161,"column":10,"nodeType":"199","messageId":"200","endLine":161,"endColumn":16},{"ruleId":"197","severity":1,"message":"202","line":161,"column":18,"nodeType":"199","messageId":"200","endLine":161,"endColumn":27},{"ruleId":"193","severity":1,"message":"203","line":224,"column":6,"nodeType":"195","endLine":224,"endColumn":8,"suggestions":"204"},{"ruleId":"193","severity":1,"message":"205","line":167,"column":6,"nodeType":"195","endLine":167,"endColumn":19,"suggestions":"206"},{"ruleId":"207","severity":1,"message":"208","line":122,"column":28,"nodeType":"209","messageId":"210","endLine":122,"endColumn":63},{"ruleId":"193","severity":1,"message":"211","line":150,"column":6,"nodeType":"195","endLine":150,"endColumn":8,"suggestions":"212"},{"ruleId":"193","severity":1,"message":"213","line":141,"column":6,"nodeType":"195","endLine":141,"endColumn":8,"suggestions":"214"},{"ruleId":"193","severity":1,"message":"215","line":81,"column":6,"nodeType":"195","endLine":81,"endColumn":22,"suggestions":"216"},{"ruleId":"193","severity":1,"message":"217","line":91,"column":6,"nodeType":"195","endLine":91,"endColumn":19,"suggestions":"218"},{"ruleId":"219","severity":1,"message":"220","line":16,"column":22,"nodeType":"221","messageId":"222","endLine":16,"endColumn":24},{"ruleId":"197","severity":1,"message":"223","line":37,"column":5,"nodeType":"199","messageId":"200","endLine":37,"endColumn":17},{"ruleId":"197","severity":1,"message":"224","line":10,"column":8,"nodeType":"199","messageId":"200","endLine":10,"endColumn":20},{"ruleId":"193","severity":1,"message":"225","line":42,"column":6,"nodeType":"195","endLine":42,"endColumn":8,"suggestions":"226"},{"ruleId":"193","severity":1,"message":"227","line":36,"column":6,"nodeType":"195","endLine":36,"endColumn":62,"suggestions":"228"},{"ruleId":"219","severity":1,"message":"229","line":20,"column":40,"nodeType":"221","messageId":"230","endLine":20,"endColumn":42},{"ruleId":"231","severity":1,"message":"232","line":151,"column":19,"nodeType":"233","messageId":"234","endLine":151,"endColumn":30},{"ruleId":"193","severity":1,"message":"235","line":173,"column":6,"nodeType":"195","endLine":173,"endColumn":8,"suggestions":"236"},{"ruleId":"237","severity":1,"message":"238","line":312,"column":19,"nodeType":"239","messageId":"240","endLine":312,"endColumn":39},{"ruleId":"193","severity":1,"message":"241","line":80,"column":6,"nodeType":"195","endLine":80,"endColumn":13,"suggestions":"242"},{"ruleId":"193","severity":1,"message":"243","line":109,"column":6,"nodeType":"195","endLine":109,"endColumn":14,"suggestions":"244"},{"ruleId":"193","severity":1,"message":"241","line":116,"column":6,"nodeType":"195","endLine":116,"endColumn":13,"suggestions":"245"},{"ruleId":"197","severity":1,"message":"246","line":1,"column":17,"nodeType":"199","messageId":"200","endLine":1,"endColumn":26},{"ruleId":"193","severity":1,"message":"247","line":48,"column":6,"nodeType":"195","endLine":48,"endColumn":8,"suggestions":"248"},"no-native-reassign",["249"],"no-negated-in-lhs",["250"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'createSessionId'. Either include it or remove the dependency array.","ArrayExpression",["251"],"no-unused-vars","'setShowUserMenu' is assigned a value but never used.","Identifier","unusedVar","'logged' is assigned a value but never used.","'setLogged' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'checkSigned'. Either include it or remove the dependency array.",["252"],"React Hook useEffect has a missing dependency: 'submitHandle'. Either include it or remove the dependency array.",["253"],"no-self-compare","Comparing to itself is potentially pointless.","BinaryExpression","comparingToSelf","React Hook useEffect has a missing dependency: 'fetchMovie'. Either include it or remove the dependency array.",["254"],"React Hook useEffect has missing dependencies: 'fetchActorDetails' and 'fetchAllCredits'. Either include them or remove the dependency array.",["255"],"React Hook useEffect has missing dependencies: 'fetchMovies', 'fetchPeople', and 'fetchTv'. Either include them or remove the dependency array.",["256"],"React Hook useEffect has missing dependencies: 'fetchMovies', 'fetchPeople', 'fetchTv', and 'resultsType'. Either include them or remove the dependency array.",["257"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'borderRadius' is assigned a value but never used.","'MediaActions' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["258"],"React Hook useEffect has missing dependencies: 'categories' and 'setResultsType'. Either include them or remove the dependency array. If 'setResultsType' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["259"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","React Hook useEffect has a missing dependency: 'setSortOption'. Either include it or remove the dependency array. If 'setSortOption' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["260"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","React Hook useEffect has a missing dependency: 'addRating'. Either include it or remove the dependency array.",["261"],"React Hook useEffect has a missing dependency: 'getAccountStates'. Either include it or remove the dependency array.",["262"],["263"],"'useEffect' is defined but never used.","React Hook useEffect has missing dependencies: 'radius' and 'rating'. Either include them or remove the dependency array.",["264"],"no-global-assign","no-unsafe-negation",{"desc":"265","fix":"266"},{"desc":"267","fix":"268"},{"desc":"269","fix":"270"},{"desc":"271","fix":"272"},{"desc":"273","fix":"274"},{"desc":"275","fix":"276"},{"desc":"277","fix":"278"},{"desc":"279","fix":"280"},{"desc":"281","fix":"282"},{"desc":"283","fix":"284"},{"desc":"285","fix":"286"},{"desc":"287","fix":"288"},{"desc":"285","fix":"289"},{"desc":"290","fix":"291"},"Update the dependencies array to be: [createSessionId]",{"range":"292","text":"293"},"Update the dependencies array to be: [checkSigned]",{"range":"294","text":"295"},"Update the dependencies array to be: [loadContent, submitHandle]",{"range":"296","text":"297"},"Update the dependencies array to be: [fetchMovie]",{"range":"298","text":"299"},"Update the dependencies array to be: [fetchActorDetails, fetchAllCredits]",{"range":"300","text":"301"},"Update the dependencies array to be: [fetchMovies, fetchPeople, fetchTv, location.state]",{"range":"302","text":"303"},"Update the dependencies array to be: [currentPage, fetchMovies, fetchPeople, fetchTv, resultsType]",{"range":"304","text":"305"},"Update the dependencies array to be: [fetchData]",{"range":"306","text":"307"},"Update the dependencies array to be: [totalResultsTv, totalResultsMovies, totalResultsPeople, setResultsType, categories]",{"range":"308","text":"309"},"Update the dependencies array to be: [setSortOption]",{"range":"310","text":"311"},"Update the dependencies array to be: [addRating, score]",{"range":"312","text":"313"},"Update the dependencies array to be: [getAccountStates, signed]",{"range":"314","text":"315"},{"range":"316","text":"313"},"Update the dependencies array to be: [radius, rating]",{"range":"317","text":"318"},[983,985],"[createSessionId]",[5391,5393],"[checkSigned]",[5181,5194],"[loadContent, submitHandle]",[4135,4137],"[fetchMovie]",[4241,4243],"[fetchActorDetails, fetchAllCredits]",[2826,2842],"[fetchMovies, fetchPeople, fetchTv, location.state]",[3064,3077],"[currentPage, fetchMovies, fetchPeople, fetchTv, resultsType]",[1125,1127],"[fetchData]",[907,963],"[totalResultsTv, totalResultsMovies, totalResultsPeople, setResultsType, categories]",[3654,3656],"[setSortOption]",[1902,1909],"[addRating, score]",[2979,2987],"[getAccountStates, signed]",[3126,3133],[1281,1283],"[radius, rating]"]